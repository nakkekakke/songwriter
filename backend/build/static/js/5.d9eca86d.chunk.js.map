{"version":3,"sources":["components/nav/LogButton.js","components/nav/NavButton.js","components/nav/NavButtonsDiv.js","components/nav/NavBar.js","components/songs/SongListItem.js","components/songs/SongList.js","components/songs/SongSection.js","components/songs/SongSectionList.js","components/DialogCloseButton.js","components/songs/UnsavedPrompt.js","components/songs/Song.js","components/app/AuthenticatedApp.js"],"names":["LogButton","loggedIn","dispatch","useDispatch","history","useHistory","Button","color","onClick","logout","showAlert","alerts","push","useStyles","makeStyles","navButton","textDecoration","padding","NavButton","path","text","classes","component","Link","to","className","root","flex","NavButtonsDiv","loggedOutButtons","flexGrow","title","fontSize","paddingRight","NavBar","AppBar","position","Toolbar","Typography","item","SongListItem","song","ListItem","id","divider","addSongButton","margin","SongList","songs","useSelector","state","user","auth","console","log","length","List","map","key","variant","startIcon","Add","createSong","songHelper","getDefaultSong","then","res","catch","e","theme","section","borderWidth","borderStyle","borderRadius","borderColor","palette","primary","main","marginBottom","overflow","whiteSpace","backgroundColor","normalViewRoot","marginTop","line","editForm","nameField","bottomDiv","display","lineSubmitButton","cloneButton","deleteButton","marginLeft","dragHandle","SongSection","songId","sectionId","editMode","useState","deleteConfirm","setDeleteConfirm","DragHandle","SortableHandle","Box","Icon","DragIndicator","find","s","sections","handleNameChange","event","editedSection","lines","name","target","value","editSection","handleLinesChange","linesArray","linesStringToArray","handleCloneClick","cloneSection","handleDeleteClick","preventDefault","deleteSection","TextField","label","defaultValue","onChange","multiline","rows","size","linesArrayToString","fullWidth","index","SortableItem","SortableElement","SortableList","SortableContainer","Container","maxWidth","align","SongSectionList","handleSortEnd","oldIndex","newIndex","sortedSections","arrayMove","sortSections","onSortEnd","useDragHandle","useWindowAsScrollContainer","closeButton","right","spacing","top","grey","DialogCloseButton","IconButton","Close","UnsavedPrompt","handleSaveAgreeClick","handleSaveDiscardClick","unsavedChanges","handlePromptConfirmSaveClick","onConfirm","handlePromptConfirmDiscardClick","when","isActive","onCancel","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","navPrompt","menuContainer","editModeButton","titleField","addSectionButton","deleteSongButton","dialogCloseButton","Song","setEditMode","delConfirmOpen","setDelConfirmOpen","saveOpen","setSaveOpen","titleError","setTitleError","useParams","snapshot","handleSaveClick","saveSnapshot","saveSong","handleEditButtonClick","handleEditModeExitClick","handleEditModeEnterClick","resetSnapshot","getSongFromSnapshot","handleTitleChange","editTitle","handleAddSectionClick","addSection","handleDeleteAgreeClick","deleteSong","_","isEmpty","isEqual","error","helperText","saveButton","DeleteForever","mainContainer","justifyContent","alignItems","contentContainer","AuthenticatedApp","useEffect","initializeSongs"],"mappings":"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","file":"static/js/5.d9eca86d.chunk.js","sourcesContent":["import React from 'react'\nimport { Button } from '@material-ui/core'\nimport { useDispatch } from 'react-redux'\nimport { logout } from '../../redux/authReducer'\nimport { useHistory } from 'react-router'\nimport PropTypes from 'prop-types'\nimport { showAlert, alerts } from '../../redux/alertReducer'\n\nconst LogButton = ({ loggedIn }) => {\n\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  const handleLogClick = () => {\n    if (loggedIn) {\n      dispatch(logout())\n      dispatch(showAlert(alerts.logout))\n    }\n    history.push('/')\n  }\n\n  return (\n    <Button\n      color='inherit'\n      onClick={handleLogClick}\n    >\n      {loggedIn ? 'Log out' : 'Log in'}\n    </Button>\n  )\n}\n\nLogButton.propTypes = {\n  loggedIn: PropTypes.bool\n}\n\nexport default LogButton","import React from 'react'\nimport { Button, makeStyles } from '@material-ui/core'\nimport { Link } from 'react-router-dom'\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles(() => ({\n  navButton: {\n    textDecoration: 'none',\n    color: 'white',\n    padding: 20\n  }\n}))\n\nconst NavButton = ({ path, text, onClick }) => {\n  const classes = useStyles()\n\n  return (\n    <Button\n      component={Link}\n      to={path}\n      onClick={onClick}\n      color='inherit'\n      className={classes.navButton}\n    >\n      {text}\n    </Button>\n  )\n}\n\nNavButton.propTypes = {\n  path: PropTypes.string,\n  text: PropTypes.string.isRequired,\n  onClick: PropTypes.func\n}\n\nexport default NavButton","import React from 'react'\nimport NavButton from './NavButton'\nimport { makeStyles } from '@material-ui/core'\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    flex: 1\n  }\n}))\n\nconst NavButtonsDiv = ({ loggedIn }) => {\n  const classes = useStyles()\n\n  const loggedInButtons = () => {\n    return <NavButton path='/songs/' text='Your songs' />\n  }\n\n  const loggedOutButtons = () => {\n\n  }\n\n  return (\n    <div className={classes.root}>\n      {loggedIn ? loggedInButtons() : loggedOutButtons()}\n    </div>\n  )\n}\n\nNavButtonsDiv.propTypes = {\n  loggedIn: PropTypes.bool\n}\n\nexport default NavButtonsDiv","import React from 'react'\nimport { AppBar, Toolbar, Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport LogoutButton from './LogButton'\nimport NavButtonsDiv from './NavButtonsDiv'\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    flexGrow: 1\n  },\n  title: {\n    fontSize: 20,\n    paddingRight: 15\n  }\n}))\n\nconst NavBar = ({ loggedIn }) => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <AppBar position='static'>\n        <Toolbar>\n          <Typography className={classes.title}>\n            SongWriter\n          </Typography>\n          <NavButtonsDiv loggedIn={loggedIn} />\n          <LogoutButton loggedIn={loggedIn} />\n        </Toolbar>\n      </AppBar>\n    </div>\n\n  )\n}\n\nNavBar.propTypes = {\n  loggedIn: PropTypes.bool\n}\n\nexport default NavBar","import React from 'react'\nimport { ListItem, makeStyles } from '@material-ui/core'\nimport { Link } from 'react-router-dom'\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles(() => ({\n  item: {\n\n  }\n}))\n\nconst SongListItem = ({ song }) => {\n  const classes = useStyles()\n\n  return (\n    <ListItem\n      component={Link}\n      to={`/songs/${song.id}`}\n      divider={true}\n      className={classes.item}\n    >\n      <h2>{song.title}</h2>\n    </ListItem>\n  )\n}\n\nSongListItem.propTypes = {\n  song: PropTypes.object.isRequired\n}\n\nexport default SongListItem","import React from 'react'\nimport { List, makeStyles, Button } from '@material-ui/core'\nimport SongListItem from './SongListItem'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Add } from '@material-ui/icons'\nimport songHelper from '../../helpers/songHelper'\nimport { createSong } from '../../redux/songReducer'\nimport { useHistory } from 'react-router'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n\n  },\n  addSongButton: {\n    margin: 8\n  }\n}))\n\nconst SongList = () => {\n  const classes = useStyles()\n  const songs = useSelector((state) => state.songs)\n  const user = useSelector((state) => state.auth.user)\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  console.log('Rendered', songs.length, 'songs')\n\n  const handleNewSongClick = () => {\n    dispatch(createSong(songHelper.getDefaultSong(user))) // Note: not error handling createSong\n      .then(res => {\n        history.push('/songs/' + res.id)\n        console.log('Redirected!')\n      })\n      .catch(e => console.log('Error creating new song:', e))\n  }\n\n  const listSongs = () => songs.map(song =>\n    <SongListItem\n      key={song.id}\n      to={`/songs/${song.id}`}\n      song={song}\n    />\n  )\n\n  return (\n    <div className={classes.root}>\n      <h1>Songs</h1>\n      <List>\n        {songs.length !== 0 ? listSongs() : <p>No songs found</p>}\n      </List>\n      <Button\n        className={classes.addSongButton}\n        variant='contained'\n        color='primary'\n        startIcon={<Add />}\n        onClick={handleNewSongClick}\n      >\n        New song\n      </Button>\n    </div>\n  )\n}\n\nexport default SongList","import React, { useState } from 'react'\nimport { makeStyles, TextField, Button, Icon, Box } from '@material-ui/core'\nimport PropTypes from 'prop-types'\nimport songHelper from '../../helpers/songHelper'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { editSection, deleteSection, cloneSection } from '../../redux/songReducer'\n\nimport { SortableHandle } from 'react-sortable-hoc'\nimport { DragIndicator } from '@material-ui/icons'\n\nconst useStyles = makeStyles((theme) => ({\n  section: {\n    borderWidth: 2,\n    borderStyle: 'solid',\n    borderRadius: 5,\n    borderColor: theme.palette.primary.main,\n    padding: 20,\n    marginBottom: 3,\n    overflow: 'auto',\n    whiteSpace: 'nowrap',\n    backgroundColor: '#fff'\n  },\n  normalViewRoot: {\n    marginTop: -12,\n    marginBottom: -15\n  },\n  line: {\n    marginTop: -5\n  },\n  editForm: {\n    marginBottom: 15\n  },\n  nameField: {\n    marginBottom: 10\n  },\n  bottomDiv: {\n    display: 'flex'\n  },\n  lineSubmitButton: {\n    marginTop: 10,\n    marginBottom: -25\n  },\n  cloneButton: {\n    marginTop: 10,\n    marginBottom: -25,\n  },\n  deleteButton: {\n    marginTop: 10,\n    marginBottom: -25,\n    marginLeft: 'auto'\n  },\n  dragHandle: {\n    marginLeft: 'auto',\n    marginTop: 10,\n    marginBottom: -25,\n  }\n}))\n\nconst SongSection = ({ songId, sectionId, editMode }) => {\n\n\n  // Local states for inputs only\n  //const [name, setName] = useState(section.name)\n  //const [linesString, setLinesString] = useState(songHelper.linesArrayToString(section.lines)) // Lines are a string while in state\n  const [deleteConfirm, setDeleteConfirm] = useState(false)\n\n  const classes = useStyles()\n  const dispatch = useDispatch()\n\n  const DragHandle = SortableHandle(() => <Box className={classes.dragHandle}> <Icon><DragIndicator /></Icon> </Box>)\n\n  const section = useSelector((state) => state.songs.find(s => s.id === songId).sections.find(s => s.id === sectionId))\n\n  const editView = () => {\n    return (\n      <form className={classes.editForm} >\n        <TextField className={classes.nameField} label='Edit name' name='name' defaultValue={section.name} onChange={handleNameChange} />\n        <div>\n          <TextField\n            multiline\n            label='Lines'\n            name='lines'\n            rows={section.lines.size}\n            defaultValue={songHelper.linesArrayToString(section.lines)}\n            onChange={handleLinesChange}\n            fullWidth={true}\n          />\n        </div>\n        <div className={classes.bottomDiv}>\n          <Button\n            className={classes.cloneButton}\n            size='small'\n            color='primary'\n            variant='outlined'\n            onClick={handleCloneClick}\n          >\n            Clone\n          </Button>\n          <DragHandle />\n          <Button\n            className={classes.deleteButton}\n            size='small'\n            color='secondary'\n            variant='outlined'\n            onClick={handleDeleteClick}\n          >\n            {deleteConfirm ? 'Confirm deletion' : 'Delete'}\n          </Button>\n        </div>\n      </form>\n    )\n  }\n\n  const normalView = () => {\n    return (\n      <div className={classes.normalViewRoot}>\n        <h2>{section.name}</h2>\n        {section.lines.map((line, index) => {\n          return <p className={classes.line} key={index}>{line}</p>\n        })}\n      </div>\n    )\n  }\n\n  const handleNameChange = (event) => {\n    const editedSection = { ...section, lines: [...section.lines], name: event.target.value }\n    dispatch(editSection(songId, editedSection))\n  }\n\n  const handleLinesChange = (event) => {\n    const linesArray = songHelper.linesStringToArray(event.target.value)\n    const editedSection = { ...section, lines: linesArray }\n    dispatch(editSection(songId, editedSection))\n  }\n\n  const handleCloneClick = () => {\n    console.log('Cloning', section)\n    dispatch(cloneSection(songId, section))\n  }\n\n  const handleDeleteClick = (event) => {\n    event.preventDefault()\n    console.log('Delete button pressed!')\n    if (deleteConfirm) {\n      console.log('Delete for realz')\n      dispatch(deleteSection(songId, section))\n    } else {\n      setDeleteConfirm(true)\n    }\n  }\n\n  return (\n    <div className={classes.section}>\n      {editMode ? editView() : normalView()}\n    </div>\n  )\n}\n\nSongSection.propTypes = {\n  songId: PropTypes.string.isRequired,\n  sectionId: PropTypes.number.isRequired,\n  editMode: PropTypes.bool.isRequired\n}\n\nexport default SongSection","import React from 'react'\nimport { Container } from '@material-ui/core'\nimport SongSection from './SongSection'\nimport { SortableContainer, SortableElement } from 'react-sortable-hoc'\nimport arrayMove from 'array-move'\nimport { useDispatch } from 'react-redux'\nimport { sortSections } from '../../redux/songReducer'\n\nconst SortableItem = SortableElement(({ section, song, editMode }) => {\n  return (\n    <SongSection\n      songId={song.id}\n      sectionId={section.id}\n      editMode={editMode}\n    >\n    </SongSection>\n  )\n})\n\nconst SortableList = SortableContainer(({ song, editMode }) => {\n  return (\n    <Container maxWidth={false} align='left'>\n      {song.sections.map((section, index) => {\n        return (\n          <SortableItem\n            key={section.id}\n            index={index}\n            section={section}\n            song={song}\n            editMode={editMode}\n          />\n        )\n      })}\n    </Container>\n  )\n})\n\nconst SongSectionList = ({ song, editMode }) => {\n\n  const dispatch = useDispatch()\n\n  const handleSortEnd = ({ oldIndex, newIndex }) => {\n    const sortedSections = arrayMove(song.sections, oldIndex, newIndex)\n    dispatch(sortSections(song, sortedSections))\n  }\n\n  const renderSections = () => {\n    if (song.sections.length === 0) {\n      return (\n        <Container>\n          <h2>No sections</h2>\n        </Container>\n      )\n    }\n    return (\n      <SortableList\n        song={song}\n        editMode={editMode}\n        onSortEnd={handleSortEnd}\n        useDragHandle\n        useWindowAsScrollContainer\n      />\n    )\n  }\n\n  return (\n    renderSections()\n  )\n}\n\nexport default SongSectionList","import React from 'react'\nimport { makeStyles, IconButton } from '@material-ui/core'\nimport { Close } from '@material-ui/icons'\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  }\n}))\n\nconst DialogCloseButton = ({ onClick }) => {\n  const classes = useStyles()\n\n  return (\n    <IconButton className={classes.closeButton} onClick={onClick}>\n      <Close />\n    </IconButton>\n  )\n}\n\nDialogCloseButton.propTypes = {\n  onClick: PropTypes.func.isRequired\n}\n\nexport default DialogCloseButton","import React from 'react'\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core'\nimport NavigationPrompt from 'react-router-navigation-prompt'\nimport PropTypes from 'prop-types'\nimport DialogCloseButton from '../DialogCloseButton'\n\nconst UnsavedPrompt = ({ handleSaveAgreeClick, handleSaveDiscardClick, unsavedChanges }) => {\n\n  const navPrompt = (isActive, onCancel, onConfirm) => {\n    return (\n      <Dialog\n        open={isActive}\n        onClose={onCancel}\n      >\n        <DialogTitle>You have unsaved changes</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            If you leave without saving, all changes will be lost!\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handlePromptConfirmSaveClick(onConfirm)} color='primary' variant='contained'>\n            Save and leave\n          </Button>\n          <Button onClick={handlePromptConfirmDiscardClick(onConfirm)} color='secondary' variant='contained'>\n            Leave without saving\n          </Button>\n          <DialogCloseButton onClick={onCancel} />\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  const handlePromptConfirmSaveClick = (onConfirm) => () => {\n    handleSaveAgreeClick()\n    onConfirm()\n  }\n\n  const handlePromptConfirmDiscardClick = (onConfirm) => () => {\n    handleSaveDiscardClick()\n    onConfirm()\n  }\n\n  return (\n    <NavigationPrompt when={unsavedChanges()}>\n      {({ isActive, onCancel, onConfirm }) => navPrompt(isActive, onCancel, onConfirm) }\n    </NavigationPrompt>\n  )\n}\n\nUnsavedPrompt.propTypes = {\n  handleSaveAgreeClick: PropTypes.func.isRequired,\n  handleSaveDiscardClick: PropTypes.func.isRequired,\n  unsavedChanges: PropTypes.func.isRequired\n}\n\nexport default UnsavedPrompt","import React, { useState } from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport { makeStyles, Container, Button, TextField, DialogTitle, DialogContent, DialogContentText, DialogActions, Dialog } from '@material-ui/core'\nimport { Add, DeleteForever } from '@material-ui/icons'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { editTitle, addSection, deleteSong, saveSong, getSongFromSnapshot } from '../../redux/songReducer'\nimport { saveSnapshot, resetSnapshot } from '../../redux/snapshotReducer'\nimport SongSectionList from './SongSectionList'\nimport _ from 'lodash'\nimport UnsavedPrompt from './UnsavedPrompt'\nimport DialogCloseButton from '../DialogCloseButton'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n\n  },\n  menuContainer: {\n    marginBottom: theme.spacing(1)\n  },\n  editModeButton: {\n    marginLeft: theme.spacing(1)\n  },\n  titleField: {\n    margin: 15\n  },\n  addSectionButton: {\n    marginTop: theme.spacing(1)\n  },\n  deleteSongButton: {\n    marginLeft: 'auto'\n  },\n  dialogCloseButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  }\n}))\n\nconst Song = () => {\n  const [editMode, setEditMode] = useState(false)\n  const [delConfirmOpen, setDelConfirmOpen] = useState(false)\n  const [saveOpen, setSaveOpen] = useState(false)\n  const [titleError, setTitleError] = useState(false)\n\n  const classes = useStyles()\n  const id = useParams().id\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  const song = useSelector((state) => state.songs.find(s => s.id === id))\n\n  const snapshot = useSelector((state) => state.snapshot)\n\n  console.log('Song render:', song)\n\n  const renderTitle = () => {\n    if (editMode) {\n      return (\n        <TextField\n          error={titleError}\n          className={classes.titleField}\n          label='Edit title'\n          defaultValue={song.title}\n          onChange={handleTitleChange}\n          helperText={titleError ? 'Title cannot be empty!' : ''} // Todo: enforce\n        />\n      )\n    } else {\n      return (\n        <h1>{song.title}</h1>\n      )\n    }\n  }\n\n  const saveButton = () => {\n    if (unsavedChanges()) {\n      return (\n        <Button\n          color='primary'\n          variant='outlined'\n          onClick={handleSaveClick}\n        >\n          Save changes\n        </Button>\n      )\n    }\n  }\n\n  const editModeButton = () => {\n    return (\n      <Button\n        color='primary'\n        variant='contained'\n        onClick={handleEditButtonClick}\n        className={classes.editModeButton}\n      >\n        {editMode ? 'Exit edit mode' : 'Edit mode'}\n      </Button>\n    )\n  }\n\n  const addSectionButton = () => {\n    if (editMode) {\n      return (\n        <Button\n          className={classes.addSectionButton}\n          variant='contained'\n          color='primary'\n          startIcon={<Add />}\n          onClick={handleAddSectionClick}\n        >\n          New section\n        </Button>\n      )\n    }\n    return (<div/>)\n  }\n\n  const deleteSongButton = () => {\n    if (editMode) {\n      return (\n        <Button\n          className={classes.deleteSongButton}\n          variant='contained'\n          color='secondary'\n          startIcon={<DeleteForever />}\n          onClick={() => setDelConfirmOpen(true)}\n        >\n          Delete song\n        </Button>\n      )\n    }\n    return (<div/>)\n  }\n\n  const deleteDialog = () => {\n    return (\n      <Dialog\n        open={delConfirmOpen}\n        onClose={() => setDelConfirmOpen(false)}\n      >\n        <DialogTitle>Delete this song?</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Once deleted, this song cannot be restored (not even by discarding changes when exiting Edit Mode).\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleDeleteAgreeClick} color='secondary' variant='contained'>\n            Delete permanently\n          </Button>\n          <Button onClick={() => setDelConfirmOpen(false)} variant='contained'>\n            Cancel\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  const saveDialog = () => {\n    return (\n      <Dialog\n        open={saveOpen}\n        onClose={() => setSaveOpen(false)}\n      >\n        <DialogTitle>Save changes?</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Save or discard the changes you have made.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleSaveAgreeClick} color='primary' variant='contained'>\n            Save changes\n          </Button>\n          <Button onClick={handleSaveDiscardClick} color='secondary' variant='contained'>\n            Discard changes\n          </Button>\n          <DialogCloseButton onClick={() => setSaveOpen(false)} />\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  const handleSaveClick = () => {\n    dispatch(saveSnapshot(song))\n    dispatch(saveSong(song))\n  }\n\n  const handleEditButtonClick = () => {\n    if (editMode) {\n      handleEditModeExitClick()\n    } else {\n      handleEditModeEnterClick()\n    }\n  }\n\n  const handleEditModeEnterClick = () => {\n    dispatch(saveSnapshot(song))\n    setEditMode(true)\n  }\n\n  const handleEditModeExitClick = () => {\n    console.log('Exiting edit mode')\n    if (unsavedChanges()) {\n      setSaveOpen(true)\n    } else {\n      setEditMode(false)\n      dispatch(resetSnapshot())\n    }\n  }\n\n  const handleSaveAgreeClick = () => {\n    console.log('Saving!')\n    setSaveOpen(false)\n    setEditMode(false)\n    dispatch(resetSnapshot())\n    dispatch(saveSong(song))\n  }\n\n  const handleSaveDiscardClick = () => {\n    console.log('Discarding changes!')\n    setSaveOpen(false)\n    setEditMode(false)\n    dispatch(resetSnapshot())\n    dispatch(getSongFromSnapshot(snapshot))\n    console.log('Snapshot after reset:', snapshot)\n  }\n\n  const handleTitleChange = (event) => {\n    if (event.target.value === '') {\n      setTitleError(true)\n    } else if (titleError) {\n      setTitleError(false)\n    }\n    dispatch(editTitle(song, event.target.value))\n  }\n\n  const handleAddSectionClick = () => {\n    console.log('Add new section!')\n    dispatch(addSection(song))\n  }\n\n  const handleDeleteAgreeClick = () => {\n    console.log('Deleting song here')\n    dispatch(deleteSong(song))\n    dispatch(resetSnapshot())\n    history.push('/songs/')\n  }\n\n  const unsavedChanges = () => {\n    return !_.isEmpty(snapshot) && !_.isEqual(snapshot, song)\n  }\n\n  if (song) {\n    return (\n      <div className={classes.root}>\n        {renderTitle()}\n        <div>\n          <Container align='right' maxWidth={false} className={classes.menuContainer}>\n            {saveButton()}\n            {editModeButton()}\n          </Container>\n          <SongSectionList song={song} editMode={editMode} />\n        </div>\n        <Container maxWidth={false}>\n          {addSectionButton()}\n        </Container>\n        <Container align='right' maxWidth={false}>\n          {deleteSongButton()}\n        </Container>\n        {deleteDialog()}\n        {saveDialog()}\n        <UnsavedPrompt\n          handleSaveAgreeClick={handleSaveAgreeClick}\n          handleSaveDiscardClick={handleSaveDiscardClick}\n          unsavedChanges={unsavedChanges}\n        />\n      </div>\n    )\n  } else {\n    return (\n      <div>\n        <h1>Loading</h1>\n        <p>Check the url if it takes too long</p>\n      </div>\n    )\n  }\n}\n\nexport default Song","import React, { useEffect } from 'react'\nimport NavBar from '../nav/NavBar'\nimport { makeStyles, Container } from '@material-ui/core'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport SongList from '../songs/SongList'\nimport Song from '../songs/Song'\nimport { initializeSongs } from '../../redux/songReducer'\nimport { useDispatch, useSelector } from 'react-redux'\n\nconst useStyles = makeStyles(() => ({\n  mainContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20\n  },\n  contentContainer: {\n\n  }\n}))\n\nconst AuthenticatedApp = () => {\n  console.log('App rendering')\n  //const [open, setOpen] = useState(false)\n\n  const classes = useStyles()\n  const dispatch = useDispatch()\n\n  const user = useSelector((state) => state.auth.user)\n\n  useEffect(() => {\n    console.log('App effect')\n    dispatch(initializeSongs(user))\n  }, [dispatch])\n\n  return (\n    <>\n      <Router>\n        <NavBar loggedIn />\n        <Container maxWidth={false} className={classes.mainContainer}>\n          <Container maxWidth={false} align='center' className={classes.contentContainer}>\n            <Switch>\n              <Route path='/songs/:id'>\n                <Song />\n              </Route>\n              <Route path='/songs/'>\n                <SongList />\n              </Route>\n              <Route path='/'><p>Welcome</p></Route>\n            </Switch>\n          </Container>\n        </Container>\n      </Router>\n    </>\n  )\n}\n\nexport default AuthenticatedApp\n"],"sourceRoot":""}