{"version":3,"sources":["components/Heading.js","services/userService.js","components/nav/LogButton.js","components/nav/NavButton.js","components/nav/NavButtonsDiv.js","components/nav/NavBar.js","components/songs/DeleteDialog.js","components/songs/SongMenu.js","components/songs/SongListItem.js","components/songs/SortableSongList.js","components/songs/SongList.js","components/songs/SongSection.js","components/songs/SortableSectionList.js","components/songs/SongSectionList.js","components/DialogCloseButton.js","components/songs/UnsavedPrompt.js","components/songs/SaveDialog.js","components/songs/Song.js","components/app/AuthenticatedApp.js"],"names":["useStyles","makeStyles","header","marginTop","Heading","text","classes","component","variant","className","url","create","username","password","a","axios","post","res","data","usernameAvailable","editSongs","songs","songIds","map","s","id","put","headers","getAuthHeader","LogButton","loggedIn","dispatch","useDispatch","history","useHistory","Button","color","onClick","logout","showAlert","alerts","push","navButton","textDecoration","padding","NavButton","path","Link","to","root","flex","NavButtonsDiv","loggedOutButtons","flexGrow","title","fontSize","paddingRight","NavBar","AppBar","position","Toolbar","Typography","DeleteDialog","open","setOpen","handleConfirmClick","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","menu","SongMenu","song","useState","anchorTo","setAnchorTo","delConfirmOpen","setDelConfirmOpen","user","useSelector","state","auth","handleClose","IconButton","event","target","MoreVert","Menu","elevation","anchorEl","keepMounted","MenuItem","cloneSong","deleteSong","item","container","display","justifyContent","textAlign","marginBottom","DragHandle","SortableHandle","Box","style","marginLeft","Icon","DragIndicator","SongListItem","Container","maxWidth","ListItem","divider","SortableSong","SortableElement","SortableSongList","SortableContainer","align","index","key","list","addSongButton","margin","SongList","console","log","length","handleSortEnd","oldIndex","newIndex","sortedSongs","arrayMove","sortSongs","userService","List","onSortEnd","useWindowAsScrollContainer","useDragHandle","startIcon","Add","createSong","songHelper","getDefaultSong","then","catch","e","theme","section","borderWidth","borderStyle","borderRadius","borderColor","palette","primary","main","overflow","whiteSpace","backgroundColor","normalViewRoot","name","linesDiv","line","editForm","nameField","bottomDiv","lineSubmitButton","cloneButton","deleteButton","dragHandle","SongSection","songId","sectionId","editMode","deleteConfirm","setDeleteConfirm","find","sections","nameError","errors","type","SECTION_NAME_ERROR","lineError","SECTION_LINES_ERROR","handleNameChange","value","editedSection","lines","createError","removeError","editSection","handleLinesChange","linesArray","linesStringToArray","validateLines","handleCloneClick","cloneSection","handleDeleteClick","preventDefault","deleteSection","TextField","error","undefined","label","defaultValue","onChange","helperText","multiline","rows","size","linesArrayToString","fullWidth","SortableSection","SortableSectionList","SongSectionList","sortedSections","sortSections","closeButton","right","spacing","top","grey","DialogCloseButton","Close","UnsavedPrompt","handleSaveConfirmClick","handleSaveDiscardClick","unsavedChanges","saveAllowed","saveButton","onConfirm","handlePromptSaveClick","disabledSaveButton","Tooltip","arrow","disabled","handlePromptDiscardClick","when","isActive","onCancel","navPrompt","SaveDialog","handleDiscardClick","menuContainer","editModeButton","titleField","addSectionButton","deleteSongButton","dialogCloseButton","Song","setEditMode","saveOpen","setSaveOpen","useParams","songErrors","titleError","SONG_TITLE_ERROR","snapshot","useEffect","resetSnapshot","handleSaveClick","saveSnapshot","saveSong","handleEditButtonClick","handleEditModeExitClick","handleEditModeEnterClick","getSongFromSnapshot","handleTitleChange","editTitle","handleAddSectionClick","addSection","_","isEmpty","isEqual","width","DeleteForever","mainContainer","alignItems","contentContainer","AuthenticatedApp","initializeSongs"],"mappings":"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","file":"static/js/5.c5161d9f.chunk.js","sourcesContent":["import React from 'react'\nimport { makeStyles, Typography } from '@material-ui/core'\n\nconst useStyles = makeStyles(() => ({\n  header: {\n    marginTop: 30\n  }\n}))\n\nconst Heading = ({ text }) => {\n  const classes = useStyles()\n  return (\n    <Typography component='h1' variant='h4' className={classes.header}>\n      {text}\n    </Typography>\n  )\n}\n\nexport default Heading","import axios from 'axios'\nimport { getAuthHeader } from '../helpers/auth'\nconst url = '/api/users'\n\nconst getAuthConfig = () => {\n  return { headers: getAuthHeader() }\n}\n\nconst create = async (username, password) => {\n  const res = await axios.post(url, { username, password })\n  return res.data\n}\n\nconst usernameAvailable = async (username) => {\n  const res = await axios.post(url + '/username-available', { username })\n  return res.data\n}\n\nconst editSongs = async (username, songs) => {\n  const songIds = songs.map(s => s.id)\n  const res = await axios.put(url + '/songs', { username, songIds } , getAuthConfig())\n  return res.data\n}\n\nexport default { create, usernameAvailable, editSongs }","import React from 'react'\nimport { Button } from '@material-ui/core'\nimport { useDispatch } from 'react-redux'\nimport { logout } from '../../redux/authReducer'\nimport { useHistory } from 'react-router'\nimport PropTypes from 'prop-types'\nimport { showAlert, alerts } from '../../redux/alertReducer'\n\nconst LogButton = ({ loggedIn }) => {\n\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  const handleLogClick = () => {\n    if (loggedIn) {\n      dispatch(logout())\n      dispatch(showAlert(alerts.logout))\n    }\n    history.push('/')\n  }\n\n  return (\n    <Button\n      color='inherit'\n      onClick={handleLogClick}\n    >\n      {loggedIn ? 'Log out' : 'Log in'}\n    </Button>\n  )\n}\n\nLogButton.propTypes = {\n  loggedIn: PropTypes.bool\n}\n\nexport default LogButton","import React from 'react'\nimport { Button, makeStyles } from '@material-ui/core'\nimport { Link } from 'react-router-dom'\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles(() => ({\n  navButton: {\n    textDecoration: 'none',\n    color: 'white',\n    padding: 20\n  }\n}))\n\nconst NavButton = ({ path, text, onClick }) => {\n  const classes = useStyles()\n\n  return (\n    <Button\n      component={Link}\n      to={path}\n      onClick={onClick}\n      color='inherit'\n      className={classes.navButton}\n    >\n      {text}\n    </Button>\n  )\n}\n\nNavButton.propTypes = {\n  path: PropTypes.string,\n  text: PropTypes.string.isRequired,\n  onClick: PropTypes.func\n}\n\nexport default NavButton","import React from 'react'\nimport NavButton from './NavButton'\nimport { makeStyles } from '@material-ui/core'\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    flex: 1\n  }\n}))\n\nconst NavButtonsDiv = ({ loggedIn }) => {\n  const classes = useStyles()\n\n  const loggedInButtons = () => {\n    return <NavButton path='/songs/' text='Your songs' />\n  }\n\n  const loggedOutButtons = () => {\n\n  }\n\n  return (\n    <div className={classes.root}>\n      {loggedIn ? loggedInButtons() : loggedOutButtons()}\n    </div>\n  )\n}\n\nNavButtonsDiv.propTypes = {\n  loggedIn: PropTypes.bool\n}\n\nexport default NavButtonsDiv","import React from 'react'\nimport { AppBar, Toolbar, Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport LogoutButton from './LogButton'\nimport NavButtonsDiv from './NavButtonsDiv'\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    flexGrow: 1\n  },\n  title: {\n    fontSize: 20,\n    paddingRight: 15\n  }\n}))\n\nconst NavBar = ({ loggedIn }) => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <AppBar position='static'>\n        <Toolbar>\n          <Typography className={classes.title}>\n            SongWriter\n          </Typography>\n          <NavButtonsDiv loggedIn={loggedIn} />\n          <LogoutButton loggedIn={loggedIn} />\n        </Toolbar>\n      </AppBar>\n    </div>\n\n  )\n}\n\nNavBar.propTypes = {\n  loggedIn: PropTypes.bool\n}\n\nexport default NavBar","import React from 'react'\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core'\nimport PropTypes from 'prop-types'\n\nconst DeleteDialog = ({ open, setOpen, handleConfirmClick }) => {\n  return (\n    <Dialog\n      open={open}\n      onClose={() => setOpen(false)}\n    >\n      <DialogTitle>Delete this song?</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          Once deleted, this song cannot be restored.\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleConfirmClick} color='secondary' variant='contained'>\n          Delete permanently\n        </Button>\n        <Button onClick={() => setOpen(false)} variant='contained'>\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nDeleteDialog.propTypes = {\n  open: PropTypes.bool.isRequired,\n  setOpen: PropTypes.func.isRequired,\n  handleConfirmClick: PropTypes.func.isRequired\n}\n\nexport default DeleteDialog","import React, { useState } from 'react'\nimport { IconButton, Menu, MenuItem, makeStyles, Button } from '@material-ui/core'\nimport { MoreVert } from '@material-ui/icons'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { deleteSong, cloneSong } from '../../redux/songReducer'\nimport DeleteDialog from './DeleteDialog'\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles(() => ({\n  menu: {\n    '& .MuiPaper-root': {\n      //backgroundColor: '#e8e8e8ed'\n    }\n  }\n}))\n\nconst SongMenu = ({ song }) => {\n  const [anchorTo, setAnchorTo] = useState(null)\n  const [delConfirmOpen, setDelConfirmOpen] = useState(false)\n\n  const classes = useStyles()\n  const dispatch = useDispatch()\n  const user = useSelector((state) => state.auth.user)\n\n  const handleClick = (event) => {\n    setAnchorTo(event.target)\n  }\n\n  const handleClose = () => {\n    setAnchorTo(null)\n  }\n\n  const handleCloneClick = () => {\n    dispatch(cloneSong(song, user.username))\n    handleClose()\n  }\n\n  const handleDeleteClick = () => {\n    setDelConfirmOpen(true)\n    handleClose()\n  }\n\n  const handleDeleteConfirmClick = () => {\n    dispatch(deleteSong(song))\n  }\n\n  return (\n    <>\n      <IconButton\n        onClick={handleClick}\n      >\n        <MoreVert />\n      </IconButton>\n      <Menu\n        elevation={1}\n        anchorEl={anchorTo}\n        keepMounted\n        open={anchorTo !== null}\n        onClose={handleClose}\n        className={classes.menu}\n      >\n        <MenuItem>\n          <Button\n            variant='outlined'\n            color='primary'\n            onClick={handleCloneClick}\n          >\n            Clone\n          </Button>\n        </MenuItem>\n        <MenuItem>\n          <Button\n            variant='outlined'\n            color='secondary'\n            onClick={handleDeleteClick}\n          >\n            Delete\n          </Button>\n        </MenuItem>\n      </Menu>\n      <DeleteDialog\n        open={delConfirmOpen}\n        setOpen={setDelConfirmOpen}\n        handleConfirmClick={handleDeleteConfirmClick}\n      />\n    </>\n  )\n}\n\nSongMenu.propTypes = {\n  song: PropTypes.object.isRequired\n}\n\nexport default SongMenu","import React from 'react'\nimport { ListItem, makeStyles, Typography, Container, Box, Icon } from '@material-ui/core'\nimport { Link } from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport SongMenu from './SongMenu'\nimport { SortableHandle } from 'react-sortable-hoc'\nimport { DragIndicator } from '@material-ui/icons'\n\nconst useStyles = makeStyles(() => ({\n  item: {\n\n  },\n  container: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  title: {\n    textAlign: 'left',\n    marginTop: 8,\n    marginBottom: 8\n  },\n  menu: {\n\n  }\n}))\n\nconst DragHandle = SortableHandle(() => <Box style={{ marginTop: 18, marginLeft: -12 }}> <Icon><DragIndicator /></Icon> </Box>)\n\nconst SongListItem = ({ song }) => {\n  const classes = useStyles()\n\n\n  return (\n    <Container maxWidth='xl' className={classes.container}>\n      <DragHandle />\n      <ListItem\n        component={Link}\n        to={`/songs/${song.id}`}\n        divider={true}\n        className={classes.item}\n      >\n        <Typography variant='h6' className={classes.title}>\n          {song.title}\n        </Typography>\n      </ListItem>\n      <SongMenu song={song} className={classes.menu} />\n    </Container>\n  )\n}\n\nSongListItem.propTypes = {\n  song: PropTypes.object.isRequired\n}\n\nexport default SongListItem","import React from 'react'\nimport { SortableContainer, SortableElement } from 'react-sortable-hoc'\nimport { Container } from '@material-ui/core'\nimport SongListItem from './SongListItem'\n\nconst SortableSong = SortableElement(({ song }) => {\n  return (\n    <SongListItem\n      song={song}\n    >\n    </SongListItem>\n  )\n})\n\nconst SortableSongList = SortableContainer(({ songs }) => {\n  return (\n    <Container maxWidth={false} align='left'>\n      {songs.map((song, index) => {\n        return (\n          <SortableSong\n            key={song.id}\n            index={index}\n            song={song}\n          />\n        )\n      })}\n    </Container>\n  )\n})\n\nexport default SortableSongList","import React from 'react'\nimport { List, makeStyles, Button } from '@material-ui/core'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Add } from '@material-ui/icons'\nimport songHelper from '../../helpers/songHelper'\nimport { createSong, sortSongs } from '../../redux/songReducer'\nimport { useHistory } from 'react-router'\nimport Heading from '../Heading'\nimport SortableSongList from './SortableSongList'\nimport arrayMove from 'array-move'\nimport userService from '../../services/userService'\n\nconst useStyles = makeStyles(() => ({\n  list: {\n    marginTop: 10\n  },\n  addSongButton: {\n    margin: 8\n  }\n}))\n\nconst SongList = () => {\n  const classes = useStyles()\n  const songs = useSelector((state) => state.songs)\n  const user = useSelector((state) => state.auth.user)\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  console.log('Rendered', songs.length, 'songs')\n\n  const handleNewSongClick = () => {\n    dispatch(createSong(songHelper.getDefaultSong(user))) // Note: not error handling createSong\n      .then(res => {\n        history.push('/songs/' + res.id)\n        console.log('Redirected!')\n      })\n      .catch(e => console.log('Error creating new song:', e))\n  }\n\n  const handleSortEnd = async ({ oldIndex, newIndex }) => {\n    const sortedSongs = arrayMove(songs, oldIndex, newIndex)\n    console.log('Sort ended')\n    dispatch(sortSongs(sortedSongs))\n    await userService.editSongs(user.username, sortedSongs)\n  }\n\n  const songList = () => {\n    return (\n      <SortableSongList\n        songs={songs}\n        onSortEnd={handleSortEnd}\n        useWindowAsScrollContainer\n        useDragHandle\n      />\n    )\n  }\n\n  return (\n    <div>\n      <Heading text='Your songs' />\n\n      <List className={classes.list}>\n        {songs.length !== 0 ? songList() : <p>No songs found</p>}\n      </List>\n      <Button\n        className={classes.addSongButton}\n        variant='contained'\n        color='primary'\n        startIcon={<Add />}\n        onClick={handleNewSongClick}\n      >\n        New song\n      </Button>\n    </div>\n  )\n}\n\nexport default SongList","import React, { useState } from 'react'\nimport { makeStyles, TextField, Button, Icon, Box, Typography } from '@material-ui/core'\nimport PropTypes from 'prop-types'\nimport songHelper from '../../helpers/songHelper'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { editSection, deleteSection, cloneSection } from '../../redux/songReducer'\n\nimport { SortableHandle } from 'react-sortable-hoc'\nimport { DragIndicator } from '@material-ui/icons'\nimport { errors, createError, removeError } from '../../redux/errorReducer'\n\nconst useStyles = makeStyles((theme) => ({\n  section: {\n    borderWidth: 2,\n    borderStyle: 'solid',\n    borderRadius: 5,\n    borderColor: theme.palette.primary.main,\n    padding: 20,\n    marginBottom: 3,\n    overflow: 'auto',\n    whiteSpace: 'nowrap',\n    backgroundColor: '#fff'\n  },\n  normalViewRoot: {\n    marginTop: -12,\n    marginBottom: -15\n  },\n  name: {\n    marginTop: 10\n  },\n  linesDiv: {\n    marginTop: 12,\n    marginBottom: 10\n  },\n  line: {\n    marginBottom: 5\n  },\n  editForm: {\n    marginBottom: 15\n  },\n  nameField: {\n    marginBottom: 10\n  },\n  bottomDiv: {\n    display: 'flex'\n  },\n  lineSubmitButton: {\n    marginTop: 10,\n    marginBottom: -25\n  },\n  cloneButton: {\n    marginTop: 10,\n    marginBottom: -25,\n  },\n  deleteButton: {\n    marginTop: 10,\n    marginBottom: -25,\n    marginLeft: 'auto'\n  },\n  dragHandle: {\n    marginLeft: 'auto',\n    marginTop: 10,\n    marginBottom: -25,\n  }\n}))\n\nconst SongSection = ({ songId, sectionId, editMode }) => {\n  const [deleteConfirm, setDeleteConfirm] = useState(false)\n\n  const classes = useStyles()\n  const dispatch = useDispatch()\n\n  const DragHandle = SortableHandle(() => <Box className={classes.dragHandle}> <Icon><DragIndicator /></Icon> </Box>)\n\n  const section = useSelector((state) => state.songs.find(s => s.id === songId).sections.find(s => s.id === sectionId))\n  const nameError = useSelector((state) => state.errors.find(e => e.type === errors.SECTION_NAME_ERROR && e.id === sectionId))\n  const lineError = useSelector((state) => state.errors.find(e => e.type === errors.SECTION_LINES_ERROR && e.id === sectionId))\n\n  const editView = () => {\n    return (\n      <form className={classes.editForm} >\n        <TextField\n          className={classes.nameField}\n          error={nameError !== undefined}\n          label='Edit name'\n          name='name'\n          defaultValue={section.name}\n          onChange={handleNameChange}\n          helperText={nameError ? 'Length must be 1-50 characters' : ''}\n        />\n        <div>\n          <TextField\n            multiline\n            error={lineError !== undefined}\n            label='Lines'\n            name='lines'\n            rows={section.lines.size}\n            defaultValue={songHelper.linesArrayToString(section.lines)}\n            onChange={handleLinesChange}\n            fullWidth={true}\n            helperText={lineError ? 'Max 200 characters for one line' : ''}\n          />\n        </div>\n        <div className={classes.bottomDiv}>\n          <Button\n            className={classes.cloneButton}\n            size='small'\n            color='primary'\n            variant='outlined'\n            onClick={handleCloneClick}\n          >\n            Clone\n          </Button>\n          <DragHandle />\n          <Button\n            className={classes.deleteButton}\n            size='small'\n            color='secondary'\n            variant='outlined'\n            onClick={handleDeleteClick}\n          >\n            {deleteConfirm ? 'Confirm deletion' : 'Delete'}\n          </Button>\n        </div>\n      </form>\n    )\n  }\n\n  const normalView = () => {\n    return (\n      <div className={classes.normalViewRoot}>\n        <Typography variant='h6' className={classes.name}>\n          {section.name}\n        </Typography>\n        <div className={classes.linesDiv}>\n          {section.lines.map((line, index) => {\n            return (\n              <div key={index}>\n                <Typography variant='body1' className={classes.line}>{line}</Typography>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n\n  const handleNameChange = (event) => {\n    const name = event.target.value\n    const editedSection = { ...section, lines: [...section.lines], name }\n    if (name.length === 0 || name.length > 50) {\n      dispatch(createError(errors.SECTION_NAME_ERROR, sectionId))\n    } else {\n      dispatch(removeError(errors.SECTION_NAME_ERROR, sectionId))\n    }\n    dispatch(editSection(songId, editedSection))\n  }\n\n  const handleLinesChange = (event) => {\n    const linesArray = songHelper.linesStringToArray(event.target.value)\n    const editedSection = { ...section, lines: linesArray }\n    if (!songHelper.validateLines(linesArray)) {\n      dispatch(createError(errors.SECTION_LINES_ERROR, sectionId))\n    } else {\n      dispatch(removeError(errors.SECTION_LINES_ERROR, sectionId))\n    }\n    dispatch(editSection(songId, editedSection))\n  }\n\n  const handleCloneClick = () => {\n    console.log('Cloning', section)\n    dispatch(cloneSection(songId, section))\n  }\n\n  const handleDeleteClick = (event) => {\n    event.preventDefault()\n    console.log('Delete button pressed!')\n    if (deleteConfirm) {\n      console.log('Delete for realz')\n      dispatch(deleteSection(songId, section))\n    } else {\n      setDeleteConfirm(true)\n    }\n  }\n\n  return (\n    <div className={classes.section}>\n      {editMode ? editView() : normalView()}\n    </div>\n  )\n}\n\nSongSection.propTypes = {\n  songId: PropTypes.string.isRequired,\n  sectionId: PropTypes.number.isRequired,\n  editMode: PropTypes.bool.isRequired\n}\n\nexport default SongSection","import React from 'react'\nimport { SortableContainer, SortableElement } from 'react-sortable-hoc'\nimport { Container } from '@material-ui/core'\nimport SongSection from './SongSection'\n\nconst SortableSection = SortableElement(({ section, song, editMode }) => {\n  return (\n    <SongSection\n      songId={song.id}\n      sectionId={section.id}\n      editMode={editMode}\n    >\n    </SongSection>\n  )\n})\n\nconst SortableSectionList = SortableContainer(({ song, editMode }) => {\n  return (\n    <Container maxWidth={false} align='left'>\n      {song.sections.map((section, index) => {\n        return (\n          <SortableSection\n            key={section.id}\n            index={index}\n            section={section}\n            song={song}\n            editMode={editMode}\n          />\n        )\n      })}\n    </Container>\n  )\n})\n\nexport default SortableSectionList","import React from 'react'\nimport { Container } from '@material-ui/core'\nimport arrayMove from 'array-move'\nimport { useDispatch } from 'react-redux'\nimport { sortSections } from '../../redux/songReducer'\nimport SortableSectionList from './SortableSectionList'\n\n\nconst SongSectionList = ({ song, editMode }) => {\n\n  const dispatch = useDispatch()\n\n  const handleSortEnd = ({ oldIndex, newIndex }) => {\n    const sortedSections = arrayMove(song.sections, oldIndex, newIndex)\n    dispatch(sortSections(song, sortedSections))\n  }\n\n  const renderSections = () => {\n    if (song.sections.length === 0) {\n      return (\n        <Container>\n          <h2>No sections</h2>\n        </Container>\n      )\n    }\n    return (\n      <SortableSectionList\n        song={song}\n        editMode={editMode}\n        onSortEnd={handleSortEnd}\n        useDragHandle\n        useWindowAsScrollContainer\n      />\n    )\n  }\n\n  return (\n    renderSections()\n  )\n}\n\nexport default SongSectionList","import React from 'react'\nimport { makeStyles, IconButton } from '@material-ui/core'\nimport { Close } from '@material-ui/icons'\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  }\n}))\n\nconst DialogCloseButton = ({ onClick }) => {\n  const classes = useStyles()\n\n  return (\n    <IconButton className={classes.closeButton} onClick={onClick}>\n      <Close />\n    </IconButton>\n  )\n}\n\nDialogCloseButton.propTypes = {\n  onClick: PropTypes.func.isRequired\n}\n\nexport default DialogCloseButton","import React from 'react'\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button, Tooltip } from '@material-ui/core'\nimport NavigationPrompt from 'react-router-navigation-prompt'\nimport PropTypes from 'prop-types'\nimport DialogCloseButton from '../DialogCloseButton'\n\nconst UnsavedPrompt = ({ handleSaveConfirmClick, handleSaveDiscardClick, unsavedChanges, saveAllowed = true }) => {\n\n  const navPrompt = (isActive, onCancel, onConfirm) => {\n    return (\n      <Dialog\n        open={isActive}\n        onClose={onCancel}\n      >\n        <DialogTitle>You have unsaved changes</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            If you leave without saving, all changes will be lost!\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          {saveAllowed ? saveButton(onConfirm) : disabledSaveButton(onConfirm)}\n          <Button onClick={handlePromptDiscardClick(onConfirm)} color='secondary' variant='contained'>\n            Leave without saving\n          </Button>\n          <DialogCloseButton onClick={onCancel} />\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  const saveButton = (onConfirm) => {\n    return (\n      <Button onClick={handlePromptSaveClick(onConfirm)} color='primary' variant='contained'>\n        Save and leave\n      </Button>\n    )\n  }\n\n  const disabledSaveButton = (onConfirm) => {\n    return (\n      <Tooltip title='Resolve errors before saving' arrow>\n        <span> {/* !! Extra wrapper required for Safari !! */}\n          <Button onClick={handlePromptSaveClick(onConfirm)} color='primary' variant='contained' disabled>\n            Can&apos;t save\n          </Button>\n        </span>\n      </Tooltip>\n    )\n  }\n\n  const handlePromptSaveClick = (onConfirm) => () => {\n    handleSaveConfirmClick()\n    onConfirm()\n  }\n\n  const handlePromptDiscardClick = (onConfirm) => () => {\n    handleSaveDiscardClick()\n    onConfirm()\n  }\n\n  return (\n    <NavigationPrompt when={unsavedChanges()}>\n      {({ isActive, onCancel, onConfirm }) => navPrompt(isActive, onCancel, onConfirm) }\n    </NavigationPrompt>\n  )\n}\n\nUnsavedPrompt.propTypes = {\n  handleSaveConfirmClick: PropTypes.func.isRequired,\n  handleSaveDiscardClick: PropTypes.func.isRequired,\n  unsavedChanges: PropTypes.func.isRequired,\n  saveAllowed: PropTypes.bool\n}\n\nexport default UnsavedPrompt","import React from 'react'\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button, Tooltip } from '@material-ui/core'\nimport DialogCloseButton from '../DialogCloseButton'\nimport PropTypes from 'prop-types'\n\nconst SaveDialog = ({ open, setOpen, handleConfirmClick, handleDiscardClick, saveAllowed = true }) => {\n\n  const saveButton = () => {\n    return (\n      <Button onClick={handleConfirmClick} color='primary' variant='contained' >\n        Save changes\n      </Button>\n    )\n  }\n\n  const disabledSaveButton = () => {\n    return (\n      <Tooltip title='Resolve errors before saving' arrow>\n        <span> {/* !! Extra wrapper required for Safari !! */}\n          <Button onClick={handleConfirmClick} color='primary' variant='contained' disabled >\n          Can&apos;t save\n          </Button>\n        </span>\n      </Tooltip>\n    )\n  }\n\n  return (\n    <Dialog\n      open={open}\n      onClose={() => setOpen(false)}\n    >\n      <DialogTitle>Save changes?</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          Save or discard the changes you have made.\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        {saveAllowed ? saveButton() : disabledSaveButton()}\n        <Button onClick={handleDiscardClick} color='secondary' variant='contained'>\n          Discard changes\n        </Button>\n        <DialogCloseButton onClick={() => setOpen(false)} />\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nSaveDialog.propTypes = {\n  open: PropTypes.bool.isRequired,\n  setOpen: PropTypes.func.isRequired,\n  handleConfirmClick: PropTypes.func.isRequired,\n  handleDiscardClick: PropTypes.func.isRequired,\n  saveAllowed: PropTypes.bool\n}\n\nexport default SaveDialog","import React, { useState, useEffect } from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport { makeStyles, Container, Button, TextField } from '@material-ui/core'\nimport { Add, DeleteForever } from '@material-ui/icons'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { editTitle, addSection, deleteSong, saveSong, getSongFromSnapshot } from '../../redux/songReducer'\nimport { saveSnapshot, resetSnapshot } from '../../redux/snapshotReducer'\nimport SongSectionList from './SongSectionList'\nimport _ from 'lodash'\nimport UnsavedPrompt from './UnsavedPrompt'\nimport DeleteDialog from './DeleteDialog'\nimport SaveDialog from './SaveDialog'\nimport Heading from '../Heading'\nimport { errors, createError, removeError } from '../../redux/errorReducer'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n\n  },\n  menuContainer: {\n    marginBottom: theme.spacing(1)\n  },\n  editModeButton: {\n    marginLeft: theme.spacing(1)\n  },\n  titleField: {\n    margin: 12\n  },\n  addSectionButton: {\n    marginTop: theme.spacing(1)\n  },\n  deleteSongButton: {\n    marginLeft: 'auto'\n  },\n  dialogCloseButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  }\n}))\n\nconst Song = () => {\n  const [editMode, setEditMode] = useState(false)\n  const [delConfirmOpen, setDelConfirmOpen] = useState(false)\n  const [saveOpen, setSaveOpen] = useState(false)\n\n  const classes = useStyles()\n  const id = useParams().id\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  const song = useSelector((state) => state.songs.find(s => s.id === id))\n  const songErrors = useSelector((state) => state.errors)\n  console.log('Errors:', songErrors)\n  const titleError = songErrors.find(e => e.type === errors.SONG_TITLE_ERROR)\n\n  const snapshot = useSelector((state) => state.snapshot)\n\n  useEffect(() => {\n    dispatch(resetSnapshot())\n  }, [dispatch])\n\n  console.log('Song render:', song)\n\n  const calculateTitleWidth = () => {\n    return 5 + (song.title.length / 2.5)\n  }\n\n  const title = () => {\n    if (editMode) {\n      return (\n        <div style={{ width: `${calculateTitleWidth()}%` }}>\n          <TextField\n            fullWidth\n            error={titleError !== undefined}\n            className={classes.titleField}\n            label='Edit title'\n            defaultValue={song.title}\n            onChange={handleTitleChange}\n            helperText={titleError ? 'Length must be 1-50 characters' : ''}\n          />\n        </div>\n      )\n    } else {\n      return (\n        <Heading text={song.title}/>\n      )\n    }\n  }\n\n  const saveButton = () => {\n    if (unsavedChanges()) {\n      return (\n        <Button\n          color='primary'\n          variant='outlined'\n          onClick={handleSaveClick}\n          disabled={songErrors.length !== 0}\n        >\n          Save changes\n        </Button>\n      )\n    }\n  }\n\n  const editModeButton = () => {\n    return (\n      <Button\n        color='primary'\n        variant='contained'\n        onClick={handleEditButtonClick}\n        className={classes.editModeButton}\n      >\n        {editMode ? 'Exit edit mode' : 'Edit mode'}\n      </Button>\n    )\n  }\n\n  const addSectionButton = () => {\n    if (editMode) {\n      return (\n        <Button\n          className={classes.addSectionButton}\n          variant='contained'\n          color='primary'\n          startIcon={<Add />}\n          onClick={handleAddSectionClick}\n        >\n          New section\n        </Button>\n      )\n    }\n    return (<div/>)\n  }\n\n  const deleteSongButton = () => {\n    if (editMode) {\n      return (\n        <Button\n          className={classes.deleteSongButton}\n          variant='contained'\n          color='secondary'\n          startIcon={<DeleteForever />}\n          onClick={() => setDelConfirmOpen(true)}\n        >\n          Delete song\n        </Button>\n      )\n    }\n    return (<div/>)\n  }\n\n  const handleSaveClick = () => {\n    dispatch(saveSnapshot(song))\n    dispatch(saveSong(song))\n  }\n\n  const handleEditButtonClick = () => {\n    if (editMode) {\n      handleEditModeExitClick()\n    } else {\n      handleEditModeEnterClick()\n    }\n  }\n\n  const handleEditModeEnterClick = () => {\n    dispatch(saveSnapshot(song))\n    setEditMode(true)\n  }\n\n  const handleEditModeExitClick = () => {\n    console.log('Exiting edit mode')\n    if (unsavedChanges()) {\n      setSaveOpen(true)\n    } else {\n      setEditMode(false)\n      dispatch(resetSnapshot())\n    }\n  }\n\n  const handleSaveConfirmClick = () => {\n    console.log('Saving!')\n    setSaveOpen(false)\n    setEditMode(false)\n    dispatch(resetSnapshot())\n    dispatch(saveSong(song))\n  }\n\n  const handleSaveDiscardClick = () => {\n    console.log('Discarding changes!')\n    setSaveOpen(false)\n    setEditMode(false)\n    dispatch(getSongFromSnapshot(snapshot))\n    dispatch(resetSnapshot())\n  }\n\n  const handleTitleChange = (event) => {\n    if (event.target.value === '' || event.target.value.length > 50) {\n      console.log('Dispatching error')\n      dispatch(createError(errors.SONG_TITLE_ERROR))\n    } else if (titleError) {\n      console.log('Removing errors')\n      dispatch(removeError(errors.SONG_TITLE_ERROR))\n    }\n    dispatch(editTitle(song, event.target.value))\n  }\n\n  const handleAddSectionClick = () => {\n    console.log('Add new section!')\n    dispatch(addSection(song))\n  }\n\n  const handleDeleteConfirmClick = () => {\n    console.log('Deleting song here')\n    dispatch(deleteSong(song))\n    dispatch(resetSnapshot())\n    history.push('/songs/')\n  }\n\n  const unsavedChanges = () => {\n    return !_.isEmpty(snapshot) && !_.isEqual(snapshot, song)\n  }\n\n  if (song) {\n    return (\n      <div className={classes.root}>\n        {title()}\n        <div>\n          <Container align='right' maxWidth={false} className={classes.menuContainer}>\n            {saveButton()}\n            {editModeButton()}\n          </Container>\n          <SongSectionList song={song} editMode={editMode} />\n        </div>\n        <Container maxWidth={false}>\n          {addSectionButton()}\n        </Container>\n        <Container align='right' maxWidth={false}>\n          {deleteSongButton()}\n        </Container>\n        <DeleteDialog\n          open={delConfirmOpen}\n          setOpen={setDelConfirmOpen}\n          handleConfirmClick={handleDeleteConfirmClick}\n        />\n        <SaveDialog\n          open={saveOpen}\n          setOpen={setSaveOpen}\n          handleConfirmClick={handleSaveConfirmClick}\n          handleDiscardClick={handleSaveDiscardClick}\n          saveAllowed={songErrors.length === 0}\n        />\n        <UnsavedPrompt\n          handleSaveConfirmClick={handleSaveConfirmClick}\n          handleSaveDiscardClick={handleSaveDiscardClick}\n          unsavedChanges={unsavedChanges}\n          saveAllowed={songErrors.length === 0}\n        />\n      </div>\n    )\n  } else {\n    return (\n      <div>\n        <Heading text='Loading song' />\n        <p>Check the url if it takes too long</p>\n      </div>\n    )\n  }\n}\n\nexport default Song","import React, { useEffect } from 'react'\nimport NavBar from '../nav/NavBar'\nimport { makeStyles, Container } from '@material-ui/core'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport SongList from '../songs/SongList'\nimport Song from '../songs/Song'\nimport { initializeSongs } from '../../redux/songReducer'\nimport { useDispatch, useSelector } from 'react-redux'\n\nconst useStyles = makeStyles(() => ({\n  mainContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20\n  },\n  contentContainer: {\n\n  }\n}))\n\nconst AuthenticatedApp = () => {\n  console.log('App rendering')\n  //const [open, setOpen] = useState(false)\n\n  const classes = useStyles()\n  const dispatch = useDispatch()\n\n  const user = useSelector((state) => state.auth.user)\n\n  useEffect(() => {\n    console.log('App effect')\n    dispatch(initializeSongs(user))\n  }, [dispatch, user])\n\n  return (\n    <>\n      <Router>\n        <NavBar loggedIn />\n        <Container maxWidth={false} className={classes.mainContainer}>\n          <Container maxWidth={false} align='center' className={classes.contentContainer}>\n            <Switch>\n              <Route path='/songs/:id'>\n                <Song />\n              </Route>\n              <Route path='/songs/'>\n                <SongList />\n              </Route>\n              <Route path='/'><p>Welcome</p></Route>\n            </Switch>\n          </Container>\n        </Container>\n      </Router>\n    </>\n  )\n}\n\nexport default AuthenticatedApp\n"],"sourceRoot":""}