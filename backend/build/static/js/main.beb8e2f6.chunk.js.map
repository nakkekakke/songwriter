{"version":3,"sources":["components/NavBar.js","components/songs/SongListItem.js","helpers/songHelper.js","services/songService.js","redux/songReducer.js","components/songs/SongList.js","redux/snapshotReducer.js","components/songs/SongSection.js","components/songs/SongSectionList.js","components/songs/UnsavedPrompt.js","components/songs/Song.js","components/SnackbarAlert.js","App.js","redux/store.js","index.js"],"names":["useStyles","makeStyles","root","flexGrow","title","fontSize","paddingRight","buttonsDiv","flex","linkButton","textDecoration","color","padding","NavBar","classes","className","AppBar","position","Toolbar","Typography","Button","component","Link","to","logout","item","SongListItem","song","ListItem","id","divider","cutStringIntoLines","string","cutLines","match","getDefaultSong","sections","name","lines","i","length","concat","map","line","trim","filter","size","maxId","reduce","max","current","console","log","newSection","push","url","getAll","a","axios","get","res","data","getOne","create","songObject","post","edit","put","destroy","delete","songReducer","state","action","type","newState","songId","sectionId","section","find","s","editedSections","addSongButton","margin","SongList","songs","useSelector","dispatch","useDispatch","history","useHistory","List","key","variant","startIcon","Add","onClick","songHelper","songService","createdSong","then","catch","e","initialState","resetSnapshot","snapshotReducer","theme","borderWidth","borderStyle","borderRadius","borderColor","palette","primary","main","marginBottom","overflow","whiteSpace","backgroundColor","normalViewRoot","marginTop","editForm","nameField","buttonDiv","display","lineSubmitButton","deleteButton","marginLeft","dragHandle","SongSection","editMode","useState","setName","linesString","setLinesString","deleteConfirm","setDeleteConfirm","DragHandle","SortableHandle","Box","Icon","DragIndicator","handleEditSubmit","event","preventDefault","linesArray","editedSection","editSection","cleanedLines","target","value","handleNameChange","handleLinesChange","handleDeleteClick","deleteSection","onSubmit","TextField","label","defaultValue","onChange","multiline","rows","fullWidth","index","SortableItem","SortableElement","SortableList","SortableContainer","Container","maxWidth","align","SongSectionList","handleSortEnd","oldIndex","newIndex","sortedSections","arrayMove","songToDispatch","JSON","parse","stringify","sortSections","onSortEnd","useDragHandle","useWindowAsScrollContainer","UnsavedPrompt","handleSaveAgreeClick","handleSaveDiscardClick","unsavedChanges","handlePromptConfirmSaveClick","onConfirm","handlePromptConfirmDiscardClick","when","isActive","onCancel","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","navPrompt","menuContainer","titleField","addSectionButton","deleteSongButton","Song","setAlertMessage","setAlertIsError","setEditMode","delConfirmOpen","setDelConfirmOpen","saveOpen","setSaveOpen","titleError","setTitleError","useParams","snapshot","handleEditModeEnterClick","saveSnapshot","handleEditModeExitClick","savedSong","saveSong","getSongFromSnapshot","handleTitleChange","editTitle","handleAddSectionClick","addSection","handleDeleteAgreeClick","returnValue","deleteSong","error","helperText","DeleteForever","_","isEmpty","isEqual","SnackbarAlert","message","isError","handleClose","Snackbar","autoHideDuration","Alert","severity","mainContainer","justifyContent","alignItems","contentContainer","App","alertMessage","alertIsError","useEffect","path","reason","composeEnhancers","composeWithDevTools","trace","reducers","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.beb8e2f6.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { AppBar, Toolbar, Typography, Button } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    flexGrow: 1\n  },\n  title: {\n    fontSize: 20,\n    paddingRight: 15\n  },\n  buttonsDiv: {\n    flex: 1\n  },\n  linkButton: {\n    textDecoration: 'none',\n    color: 'white',\n    padding: 20\n  }\n}))\n\nconst NavBar = () => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <AppBar position='static'>\n        <Toolbar>\n          <Typography className={classes.title}>\n            SongWriter\n          </Typography>\n          <div className={classes.buttonsDiv}>\n            <Button component={Link} to={'/songs/'} color='inherit' className={classes.linkButton}>Your songs</Button>\n          </div>\n          <Button color='inherit' className={classes.logout}>Logout</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n\n  )\n}\n\nexport default NavBar","import React from 'react'\nimport { ListItem, makeStyles } from '@material-ui/core'\nimport { Link } from 'react-router-dom'\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles(() => ({\n  item: {\n\n  }\n}))\n\nconst SongListItem = ({ song }) => {\n  const classes = useStyles()\n\n  return (\n    <ListItem\n      component={Link}\n      to={`/songs/${song.id}`}\n      divider={true}\n      className={classes.item}\n    >\n      <h2>{song.title}</h2>\n    </ListItem>\n  )\n}\n\nSongListItem.propTypes = {\n  song: PropTypes.object.isRequired\n}\n\nexport default SongListItem","const linesArrayToString = (lines) => {\n  let string = ''\n  for (let i = 0; i < lines.length; i++) {\n    string = string.concat(lines[i])\n    if (i + 1 < lines.length) {  // If it's not the last line, add a newline\n      string = string.concat('\\n')\n    }\n  }\n  return string\n}\n\nconst linesStringToArray = (string) => {\n  const array = cutStringIntoLines(string)\n    .map(line => line = line.trim())\n    .filter(line => line !== '')\n\n  //console.log('Trimmed lines:', array)\n  return array\n}\n\nconst lineCount = (string) => {\n  return cutStringIntoLines(string).size\n}\n\nconst cutStringIntoLines = (string) => {\n  //console.log('Cutting:', string)\n  const cutLines = string.match(/[^\\r\\n]+/g)\n  return cutLines ? cutLines : []\n}\n\nconst getDefaultSong = () => {\n  return {\n    title: 'New song',\n    sections: [\n      {\n        id: 1,\n        name: 'New section',\n        lines: []\n      }\n    ]\n  }\n}\n\nconst addNewSection = (song) => {\n  if (song.sections.length === 0) {\n    song.sections = getDefaultSong().sections\n    return song\n  }\n\n  let maxId = song.sections.reduce((max, current) => current.id > max.id ? current : max).id // Find the previously highest section id\n  console.log(maxId)\n  const newSection = {\n    ...getDefaultSong().sections[0],\n    id: maxId + 1,\n  }\n  song.sections.push(newSection) // modifies the song directly\n  return song\n}\n\n\n\nexport default { linesArrayToString, linesStringToArray, lineCount, getDefaultSong, addNewSection }","import axios from 'axios'\nconst url = '/api/songs/'\n\nconst getAll = async () => {\n  console.log('Getting songs...')\n  const res = await axios.get(url)\n  return res.data\n}\n\nconst getOne = async (id) => {\n  const res = await axios.get(url + id)\n  return res.data\n}\n\nconst create = async (songObject) => {\n  console.log('Creating new song...')\n  const res = await axios.post(url, songObject)\n  return res.data\n}\n\nconst edit = async (songObject) => {\n  console.log('REACT: Editing song: ', songObject)\n  const res = await axios.put(url + songObject.id, songObject)\n  console.log('REACT: Edited!')\n  return res.data\n}\n\nconst destroy = async (id) => {\n  console.log('Deleting song with id:', id)\n  const res = await axios.delete(url + id)\n  return res.data\n}\n\nexport default { getAll, getOne, create, edit, destroy }","import songService from '../services/songService'\nimport songHelper from '../helpers/songHelper'\n\n// Action types\nexport const INIT_SONGS = 'INIT_SONGS'\nexport const CREATE_SONG = 'CREATE_SONG'\nexport const EDIT_SONG = 'EDIT_SONG'\nexport const ADD_SECTION = 'ADD_SECTION'\nexport const DELETE_SONG = 'DELETE_SONG'\nexport const EDIT_SECTION = 'EDIT_SECTION'\nexport const DELETE_SECTION = 'DELETE_SECTION'\n\n\n// Reducer\nconst songReducer = (state = [], action) => {\n  switch (action.type) {\n  case INIT_SONGS:\n    return action.data\n  case CREATE_SONG: {\n    const newState = state.concat(action.data)\n    return newState\n  }\n  case EDIT_SONG: {\n    console.log('Editing song:', action.data)\n    const id = action.data.id\n    return state.map(song => song.id !== id ? song : action.data)\n  }\n  case DELETE_SONG:\n    return state.filter(song => song.id !== action.data.id)\n  case EDIT_SECTION: {\n    const songId = action.data.songId\n    const sectionId = action.data.section.id\n    const song = state.find(s => s.id === songId)\n    const editedSections = song.sections.map(section => section.id !== sectionId ? section : action.data.section)\n    return state.map(s => s.id !== songId ? s : { ...song, sections: editedSections })\n  }\n  case DELETE_SECTION: {\n    const songId = action.data.songId\n    const sectionId = action.data.section.id\n    const song = state.find(s => s.id === songId)\n    const editedSections = song.sections.filter(section => section.id !== sectionId)\n    return state.map(s => s.id !== songId ? s : { ...song, sections: editedSections })\n  }\n  default:\n    return state\n  }\n}\n\n// Song action creators\nexport const createSong = (song) => {\n  return async (dispatch) => {\n    try {\n      const createdSong = await songService.create(song)\n      console.log('Created:', createdSong)\n      dispatch({\n        type: CREATE_SONG,\n        data: createdSong\n      })\n      return createdSong\n    } catch (error) {\n      console.log(error)\n    }\n  }\n}\n\nexport const editTitle = (song, title) => {\n  let songToDispatch = JSON.parse(JSON.stringify(song))\n  songToDispatch.title = title\n\n  return async (dispatch) => {\n    dispatch({\n      type: EDIT_SONG,\n      data: songToDispatch\n    })\n  }\n}\n\n\nexport const initializeSongs = () => {\n  return async (dispatch) => {\n    try {\n      const songs = await songService.getAll()\n      console.log('Initialized:', songs)\n      dispatch({\n        type: INIT_SONGS,\n        data: songs\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n}\n\nexport const deleteSong = (song) => {\n  return async (dispatch) => {\n    try {\n      const returnValue = await songService.destroy(song.id)\n      console.log('Destroy returned:', returnValue)\n      dispatch({\n        type: DELETE_SONG,\n        data: song\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n}\n\n// Section action creators\nexport const editSection = (songId, section) => {\n  return async (dispatch) => {\n    dispatch({\n      type: EDIT_SECTION,\n      data: { songId, section }\n    })\n  }\n}\n\nexport const deleteSection = (songId, section) => {\n  return async (dispatch) => {\n    dispatch({\n      type: DELETE_SECTION,\n      data: { songId, section }\n    })\n  }\n}\n\nexport const addSection = (song) => {\n  let songToDispatch = JSON.parse(JSON.stringify(song))\n  songToDispatch = songHelper.addNewSection(songToDispatch)\n\n  return async (dispatch) => {\n    dispatch({\n      type: EDIT_SONG,\n      data: songToDispatch\n    })\n  }\n}\n\nexport const sortSections = (song, sortedSections) => {\n  let songToDispatch = JSON.parse(JSON.stringify(song))\n  songToDispatch.sections = sortedSections\n\n  return async (dispatch) => {\n    dispatch({\n      type: EDIT_SONG,\n      data: songToDispatch\n    })\n  }\n}\n\nexport const saveSong = (song) => {\n  return async (dispatch) => {\n    try {\n      const savedSong = await songService.edit(song)\n      dispatch({\n        type: EDIT_SONG,\n        data: savedSong\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n}\n\nexport const getSongFromSnapshot = (snapshot) => {\n  return async (dispatch) => {\n    dispatch({\n      type: EDIT_SONG,\n      data: snapshot\n    })\n  }\n}\n\nexport default songReducer","import React from 'react'\nimport { List, makeStyles, Button } from '@material-ui/core'\nimport SongListItem from './SongListItem'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Add } from '@material-ui/icons'\nimport songHelper from '../../helpers/songHelper'\nimport { createSong } from '../../redux/songReducer'\nimport { useHistory } from 'react-router'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n\n  },\n  addSongButton: {\n    margin: 8\n  }\n}))\n\nconst SongList = () => {\n  const classes = useStyles()\n  const songs = useSelector((state) => state.songs)\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  console.log('Rendered', songs.length, 'songs')\n\n  const handleNewSongClick = () => {\n    dispatch(createSong(songHelper.getDefaultSong())) // Note: not error handling createSong\n      .then(res => {\n        history.push('/songs/' + res.id)\n        console.log('Redirected!')\n      })\n      .catch(e => console.log('Error creating new song:', e))\n  }\n\n  const listSongs = () => songs.map(song =>\n    <SongListItem\n      key={song.id}\n      to={`/songs/${song.id}`}\n      song={song}\n    />\n  )\n\n  return (\n    <div className={classes.root}>\n      <h1>Songs</h1>\n      <List>\n        {songs.length !== 0 ? listSongs() : <p>No songs found</p>}\n      </List>\n      <Button\n        className={classes.addSongButton}\n        variant='contained'\n        color='primary'\n        startIcon={<Add />}\n        onClick={handleNewSongClick}\n      >\n        New song\n      </Button>\n    </div>\n  )\n}\n\nexport default SongList","export const SAVE_SNAPSHOT = 'SAVE_SNAPSHOT'\nexport const RESET_SNAPSHOT = 'RESET_SNAPSHOT'\n\nconst initialState = {} // Might upgrade to array at some point, maybe store in the database? (like version history)\n\nconst snapshotReducer = (state = initialState, action) => {\n  switch (action.type) {\n  case SAVE_SNAPSHOT:\n    return action.data\n  case RESET_SNAPSHOT:\n    return initialState\n  default:\n    return state\n  }\n}\n\nexport const saveSnapshot = (song) => {\n  console.log('Saving snapshot:', song)\n  return (dispatch) => {\n    dispatch({\n      type: SAVE_SNAPSHOT,\n      data: song\n    })\n  }\n}\n\nexport const resetSnapshot = () => {\n  console.log('Resetting snapshot')\n  return (dispatch) => {\n    dispatch({\n      type: RESET_SNAPSHOT\n    })\n  }\n}\n\nexport default snapshotReducer\n","import React, { useState } from 'react'\nimport { makeStyles, TextField, Button, Icon, Box } from '@material-ui/core'\nimport PropTypes from 'prop-types'\nimport songHelper from '../../helpers/songHelper'\nimport { useDispatch } from 'react-redux'\nimport { editSection, deleteSection } from '../../redux/songReducer'\n\nimport { SortableHandle } from 'react-sortable-hoc'\nimport { DragIndicator } from '@material-ui/icons'\n\nconst useStyles = makeStyles((theme) => ({\n  section: {\n    borderWidth: 2,\n    borderStyle: 'solid',\n    borderRadius: 5,\n    borderColor: theme.palette.primary.main,\n    padding: 20,\n    marginBottom: 3,\n    overflow: 'auto',\n    whiteSpace: 'nowrap',\n    backgroundColor: '#fff'\n  },\n  normalViewRoot: {\n    marginTop: -12,\n    marginBottom: -15\n  },\n  line: {\n    marginTop: -5\n  },\n  editForm: {\n    marginBottom: 15\n  },\n  nameField: {\n    marginBottom: 10\n  },\n  buttonDiv: {\n    display: 'flex'\n  },\n  lineSubmitButton: {\n    marginTop: 10,\n    marginBottom: -25\n  },\n  deleteButton: {\n    marginTop: 10,\n    marginBottom: -25,\n    marginLeft: 'auto'\n  },\n  dragHandle: {\n    marginLeft: 'auto',\n    marginTop: 10,\n    marginBottom: -25,\n  }\n}))\n\nconst SongSection = ({ songId, section, editMode }) => {\n\n\n  // Local states for inputs only\n  const [name, setName] = useState(section.name)\n  const [linesString, setLinesString] = useState(songHelper.linesArrayToString(section.lines)) // Lines are a string while in state\n  const [deleteConfirm, setDeleteConfirm] = useState(false)\n\n  const classes = useStyles()\n  const dispatch = useDispatch()\n\n  const DragHandle = SortableHandle(() => <Box className={classes.dragHandle}> <Icon><DragIndicator /></Icon> </Box>)\n\n  const editView = () => {\n    return (\n      <form className={classes.editForm} onSubmit={handleEditSubmit}>\n        <TextField className={classes.nameField} label='Edit name' name='name' defaultValue={name} onChange={handleNameChange} />\n        <div>\n          <TextField\n            multiline\n            label='Lines'\n            name='lines'\n            rows={songHelper.lineCount(linesString)}\n            defaultValue={linesString}\n            onChange={handleLinesChange}\n            fullWidth={true}\n          />\n        </div>\n        <div className={classes.buttonDiv}>\n          <Button\n            className={classes.lineSubmitButton}\n            size='small'\n            color='primary'\n            variant='outlined'\n            type='submit'\n          >\n            Save\n          </Button>\n          <DragHandle />\n          <Button\n            className={classes.deleteButton}\n            size='small'\n            color='secondary'\n            variant='outlined'\n            onClick={handleDeleteClick}\n          >\n            {deleteConfirm ? 'Confirm deletion' : 'Delete'}\n          </Button>\n        </div>\n      </form>\n    )\n  }\n\n  const normalView = () => {\n    return (\n      <div className={classes.normalViewRoot}>\n        <h2>{section.name}</h2>\n        {section.lines.map((line, index) => {\n          return <p className={classes.line} key={index}>{line}</p>\n        })}\n      </div>\n    )\n  }\n\n  const handleEditSubmit = (event) => {\n    event.preventDefault()\n    console.log('Submitting name:', name)\n\n    const linesArray = songHelper.linesStringToArray(linesString)\n\n    const editedSection = { id: section.id, name: name, lines: linesArray }\n    dispatch(editSection(songId, editedSection))\n\n    const cleanedLines = songHelper.linesArrayToString(linesArray)\n    event.target.lines.value = cleanedLines\n    setLinesString(cleanedLines)\n    //setAlertIsError(false)\n    //setAlertMessage('Song edited')\n  }\n\n  const handleNameChange = (event) => {\n    setName(event.target.value)\n  }\n\n  const handleLinesChange = (event) => {\n    setLinesString(event.target.value)\n  }\n\n  const handleDeleteClick = (event) => {\n    event.preventDefault()\n    console.log('Delete button pressed!')\n    if (deleteConfirm) {\n      console.log('Delete for realz')\n      dispatch(deleteSection(songId, section))\n    } else {\n      setDeleteConfirm(true)\n    }\n  }\n\n  return (\n    <div className={classes.section}>\n      {editMode ? editView() : normalView()}\n    </div>\n  )\n}\n\nSongSection.propTypes = {\n  songId: PropTypes.string.isRequired,\n  section: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string,\n    lines: PropTypes.arrayOf(PropTypes.string)\n  }).isRequired,\n  editMode: PropTypes.bool.isRequired\n}\n\nexport default SongSection","import React from 'react'\nimport { makeStyles, Container } from '@material-ui/core'\nimport SongSection from './SongSection'\nimport { SortableContainer, SortableElement } from 'react-sortable-hoc'\nimport arrayMove from 'array-move'\nimport { useDispatch } from 'react-redux'\nimport { sortSections } from '../../redux/songReducer'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n\n  }\n}))\n\nconst SortableItem = SortableElement(({ section, song, editMode }) => {\n  return (\n    <SongSection\n      songId={song.id}\n      section={section}\n      editMode={editMode}\n    >\n    </SongSection>\n  )\n})\n\nconst SortableList = SortableContainer(({ song, editMode }) => {\n  return (\n    <Container maxWidth={false} align='left'>\n      {song.sections.map((section, index) => {\n        return (\n          <SortableItem\n            key={section.id}\n            index={index}\n            section={section}\n            song={song}\n            editMode={editMode}\n          />\n        )\n      })}\n    </Container>\n  )\n})\n\nconst SongSectionList = ({ song, editMode }) => {\n\n  const dispatch = useDispatch()\n  const classes = useStyles()\n\n  const handleSortEnd = ({ oldIndex, newIndex }) => {\n    const sortedSections = arrayMove(song.sections, oldIndex, newIndex)\n    dispatch(sortSections(song, sortedSections))\n  }\n\n  const renderSections = () => {\n    if (song.sections.length === 0) {\n      return (\n        <Container>\n          <h2>No sections</h2>\n        </Container>\n      )\n    }\n    return (\n      <SortableList\n        song={song}\n        editMode={editMode}\n        onSortEnd={handleSortEnd}\n        useDragHandle\n        useWindowAsScrollContainer\n      />\n    )\n  }\n\n  return (\n    renderSections()\n  )\n}\n\nexport default SongSectionList","import React from 'react'\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core'\nimport NavigationPrompt from 'react-router-navigation-prompt'\n\nconst UnsavedPrompt = ({ handleSaveAgreeClick, handleSaveDiscardClick, unsavedChanges }) => {\n\n  const navPrompt = (isActive, onCancel, onConfirm) => {\n    return (\n      <Dialog\n        open={isActive}\n        onClose={onCancel}\n      >\n        <DialogTitle>You have made unsaved changes</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            If you leave without saving, all changes will be lost!\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handlePromptConfirmSaveClick(onConfirm)} color='primary' variant='contained'>\n            Leave and save\n          </Button>\n          <Button onClick={handlePromptConfirmDiscardClick(onConfirm)} color='secondary' variant='contained'>\n            Leave without saving\n          </Button>\n          <Button onClick={onCancel} variant='contained'>\n            Cancel\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  const handlePromptConfirmSaveClick = (onConfirm) => () => {\n    handleSaveAgreeClick()\n    onConfirm()\n  }\n\n  const handlePromptConfirmDiscardClick = (onConfirm) => () => {\n    handleSaveDiscardClick()\n    onConfirm()\n  }\n\n  return (\n    <NavigationPrompt when={unsavedChanges()}>\n      {({ isActive, onCancel, onConfirm }) => navPrompt(isActive, onCancel, onConfirm) }\n    </NavigationPrompt>\n  )\n}\n\nexport default UnsavedPrompt","import React, { useState } from 'react'\nimport { useParams, useHistory, Prompt } from 'react-router-dom'\nimport { makeStyles, Container, Button, TextField, DialogTitle, DialogContent, DialogContentText, DialogActions, Dialog } from '@material-ui/core'\nimport { Add, DeleteForever } from '@material-ui/icons'\nimport PropTypes from 'prop-types'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { editTitle, addSection, deleteSong, saveSong, getSongFromSnapshot } from '../../redux/songReducer'\nimport { saveSnapshot, resetSnapshot } from '../../redux/snapshotReducer'\nimport SongSectionList from './SongSectionList'\nimport _ from 'lodash'\nimport NavigationPrompt from 'react-router-navigation-prompt'\nimport UnsavedPrompt from './UnsavedPrompt'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n\n  },\n  menuContainer: {\n    marginBottom: 3\n  },\n  titleField: {\n    margin: 15\n  },\n  addSectionButton: {\n    marginTop: 8\n  },\n  deleteSongButton: {\n    marginLeft: 'auto'\n  }\n}))\n\nconst Song = ({ setAlertMessage, setAlertIsError }) => {\n  const [editMode, setEditMode] = useState(false)\n  const [delConfirmOpen, setDelConfirmOpen] = useState(false)\n  const [saveOpen, setSaveOpen] = useState(false)\n  const [titleError, setTitleError] = useState(false)\n\n  const classes = useStyles()\n  const id = useParams().id\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  const song = useSelector((state) => state.songs.find(s => s.id === id))\n\n  const snapshot = useSelector((state) => state.snapshot)\n\n  console.log('Song render:', song)\n\n  const renderTitle = () => {\n    if (editMode) {\n      return (\n        <TextField\n          error={titleError}\n          className={classes.titleField}\n          label='Edit title'\n          defaultValue={song.title}\n          onChange={handleTitleChange}\n          helperText={titleError ? 'Title cannot be empty!' : ''} // Todo: enforce\n        />\n      )\n    } else {\n      return (\n        <h1>{song.title}</h1>\n      )\n    }\n  }\n\n\n  const addSectionButton = () => {\n    if (editMode) {\n      return (\n        <Button\n          className={classes.addSectionButton}\n          variant='contained'\n          color='primary'\n          startIcon={<Add />}\n          onClick={handleAddSectionClick}\n        >\n          New section\n        </Button>\n      )\n    }\n    return (<div/>)\n  }\n\n  const deleteSongButton = () => {\n    if (editMode) {\n      return (\n        <Button\n          className={classes.deleteSongButton}\n          variant='contained'\n          color='secondary'\n          startIcon={<DeleteForever />}\n          onClick={() => setDelConfirmOpen(true)}\n        >\n          Delete song\n        </Button>\n      )\n    }\n    return (<div/>)\n  }\n\n  const deleteDialog = () => {\n    return (\n      <Dialog\n        open={delConfirmOpen}\n        onClose={() => setDelConfirmOpen(false)}\n      >\n        <DialogTitle>Delete this song?</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Once deleted, this song cannot be restored (not even by discarding changes when exiting Edit Mode).\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleDeleteAgreeClick} color='secondary' variant='contained'>\n            Delete permanently\n          </Button>\n          <Button onClick={() => setDelConfirmOpen(false)} variant='contained'>\n            Cancel\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  const saveDialog = () => {\n    return (\n      <Dialog\n        open={saveOpen}\n        onClose={() => setSaveOpen(false)}\n      >\n        <DialogTitle>Save changes?</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Save or discard the changes you have made.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleSaveAgreeClick} color='primary' variant='contained'>\n            Save changes\n          </Button>\n          <Button onClick={handleSaveDiscardClick} color='secondary' variant='contained'>\n            Discard changes\n          </Button>\n          <Button onClick={() => setSaveOpen(false)} variant='contained'>\n            Cancel\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  const handleEditButtonClick = () => {\n    if (editMode) {\n      handleEditModeExitClick()\n    } else {\n      handleEditModeEnterClick()\n    }\n  }\n\n  const handleEditModeEnterClick = () => {\n    dispatch(saveSnapshot(song))\n    setEditMode(true)\n  }\n\n  const handleEditModeExitClick = () => {\n    console.log('Exiting edit mode')\n    setSaveOpen(true)\n  }\n\n  const handleSaveAgreeClick = () => {\n    console.log('Saving!')\n    setSaveOpen(false)\n    setEditMode(false)\n    dispatch(resetSnapshot())\n    dispatch(saveSong(song))\n  }\n\n  const handleSaveDiscardClick = () => {\n    console.log('Discarding changes!')\n    setSaveOpen(false)\n    setEditMode(false)\n    dispatch(resetSnapshot())\n    dispatch(getSongFromSnapshot(snapshot))\n    console.log('Snapshot after reset:', snapshot)\n  }\n\n  const handleTitleChange = (event) => {\n    console.log(event.target.value)\n    if (event.target.value === '') {\n      setTitleError(true)\n    } else if (titleError) {\n      setTitleError(false)\n    }\n    dispatch(editTitle(song, event.target.value))\n  }\n\n  const handleAddSectionClick = () => {\n    console.log('Add new section!')\n    dispatch(addSection(song))\n  }\n\n  const handleDeleteAgreeClick = () => {\n    console.log('Deleting song here')\n    dispatch(deleteSong(song))\n    history.push('/songs/')\n  }\n\n  const unsavedChanges = () => {\n    return !_.isEmpty(snapshot) && !_.isEqual(snapshot, song)\n  }\n\n  if (song) {\n    return (\n      <div className={classes.root}>\n        {renderTitle()}\n        <div>\n          <Container align='right' maxWidth={false} className={classes.menuContainer}>\n            <Button\n              color='primary'\n              variant='contained'\n              onClick={handleEditButtonClick}\n            >\n              {editMode ? 'Exit edit mode' : 'Edit mode'}\n            </Button>\n          </Container>\n          <SongSectionList song={song} editMode={editMode} />\n        </div>\n        <Container maxWidth={false}>\n          {addSectionButton()}\n        </Container>\n        <Container align='right' maxWidth={false}>\n          {deleteSongButton()}\n        </Container>\n        {deleteDialog()}\n        {saveDialog()}\n        <UnsavedPrompt\n          handleSaveAgreeClick={handleSaveAgreeClick}\n          handleSaveDiscardClick={handleSaveDiscardClick}\n          unsavedChanges={unsavedChanges}\n        />\n      </div>\n    )\n  } else {\n    return (\n      <div>\n        <h1>Loading</h1>\n        <p>Check the url if it takes too long</p>\n      </div>\n    )\n  }\n}\n\nSong.propTypes = {\n  setAlertIsError: PropTypes.func.isRequired,\n  setAlertMessage: PropTypes.func.isRequired\n}\n\nexport default Song","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport Alert from '@material-ui/lab/Alert'\nimport PropTypes from 'prop-types'\n\n//const Alert = (props) => {\n//  return <MuiAlert elevation={6} variant='filled' {...props} />\n//}\n\nconst SnackbarAlert = ({ message, isError, handleClose }) => {\n  return (\n    <div>\n      <Snackbar open={message !== ''} autoHideDuration={5000} onClose={handleClose}>\n        <Alert\n          variant='filled'\n          onClose={handleClose}\n          severity={isError ? 'error' : 'success'}\n        >\n          {message}\n        </Alert>\n      </Snackbar>\n    </div>\n  )\n}\n\nSnackbarAlert.propTypes = {\n  message: PropTypes.string.isRequired,\n  isError: PropTypes.bool.isRequired,\n  handleClose: PropTypes.func.isRequired\n}\n\nexport default SnackbarAlert","import React, { useState, useEffect } from 'react'\nimport NavBar from './components/NavBar'\nimport { makeStyles, Container } from '@material-ui/core'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport SongList from './components/songs/SongList'\nimport Song from './components/songs/Song'\nimport SnackbarAlert from './components/SnackbarAlert'\nimport { initializeSongs } from './redux/songReducer'\nimport { useDispatch } from 'react-redux'\n\nconst useStyles = makeStyles(() => ({\n  mainContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20\n  },\n  contentContainer: {\n\n  }\n}))\n\nconst App = () => {\n  console.log('App render')\n  const [alertMessage, setAlertMessage] = useState('')\n  const [alertIsError, setAlertIsError] = useState(false)\n  //const [open, setOpen] = useState(false)\n\n  const classes = useStyles()\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    console.log('App effect')\n    dispatch(initializeSongs())\n  }, [dispatch])\n\n  const handleAlertClose = (event, reason) => {\n    if (reason === 'clickaway') return\n\n    setAlertMessage('')\n  }\n\n  return (\n    <>\n      <Router>\n        <NavBar/>\n        <Container maxWidth={false} className={classes.mainContainer}>\n          <Container maxWidth={false} align='center' className={classes.contentContainer}>\n            <Switch>\n              <Route path='/songs/:id'>\n                <Song\n                  setAlertMessage={setAlertMessage}\n                  setAlertIsError={setAlertIsError}\n                />\n              </Route>\n              <Route path='/songs/'>\n                <SongList/>\n              </Route>\n              <Route path='/'><p>Welcome</p></Route>\n            </Switch>\n          </Container>\n          <SnackbarAlert\n            message={alertMessage}\n            isError={alertIsError}\n            handleClose={handleAlertClose}\n          />\n        </Container>\n      </Router>\n    </>\n  )\n}\n\nexport default App\n","import { createStore, applyMiddleware, combineReducers } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport songReducer from './songReducer'\nimport snapshotReducer from './snapshotReducer'\n\nconst composeEnhancers = composeWithDevTools({ trace: true })\n\nconst reducers = combineReducers({\n  songs: songReducer,\n  snapshot: snapshotReducer\n})\n\nconst store = createStore(\n  reducers,\n  composeEnhancers(\n    applyMiddleware(thunk)\n  )\n)\n\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { CssBaseline } from '@material-ui/core'\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n  //<React.StrictMode> // MAKES EVERYTHING RENDER TWICE!\n  <CssBaseline>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </CssBaseline>,\n  //</React.StrictMode>\n  document.getElementById('root')\n)\n"],"sourceRoot":""}