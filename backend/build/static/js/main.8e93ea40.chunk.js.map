{"version":3,"sources":["components/NavBar.js","components/songs/SongListItem.js","helpers/songHelper.js","services/songService.js","redux/songReducer.js","components/songs/SongList.js","redux/snapshotReducer.js","components/songs/SongSection.js","components/songs/SongSectionList.js","components/DialogCloseButton.js","components/songs/UnsavedPrompt.js","components/songs/Song.js","components/SnackbarAlert.js","App.js","redux/store.js","index.js"],"names":["useStyles","makeStyles","root","flexGrow","title","fontSize","paddingRight","buttonsDiv","flex","linkButton","textDecoration","color","padding","NavBar","classes","className","AppBar","position","Toolbar","Typography","Button","component","Link","to","logout","item","SongListItem","song","ListItem","id","divider","cutStringIntoLines","string","cutLines","match","getDefaultSong","sections","name","lines","i","length","concat","map","line","trim","filter","maxId","s","reduce","max","current","newSection","push","url","getAll","a","console","log","axios","get","res","data","getOne","create","songObject","post","edit","put","destroy","delete","editSection","songId","section","dispatch","type","saveSong","songService","savedSong","songReducer","state","action","newState","sectionId","find","editedSections","addSongButton","margin","SongList","songs","useSelector","useDispatch","history","useHistory","List","key","variant","startIcon","Add","onClick","songHelper","createdSong","then","catch","e","initialState","saveSnapshot","resetSnapshot","snapshotReducer","theme","borderWidth","borderStyle","borderRadius","borderColor","palette","primary","main","marginBottom","overflow","whiteSpace","backgroundColor","normalViewRoot","marginTop","editForm","nameField","bottomDiv","display","lineSubmitButton","deleteButton","marginLeft","dragHandle","SongSection","editMode","useState","deleteConfirm","setDeleteConfirm","DragHandle","SortableHandle","Box","Icon","DragIndicator","handleNameChange","event","editedSection","target","value","handleLinesChange","linesArray","handleDeleteClick","preventDefault","deleteSection","TextField","label","defaultValue","onChange","multiline","rows","size","fullWidth","index","SortableItem","SortableElement","SortableList","SortableContainer","Container","maxWidth","align","SongSectionList","handleSortEnd","oldIndex","newIndex","sortedSections","arrayMove","songToDispatch","JSON","parse","stringify","sortSections","onSortEnd","useDragHandle","useWindowAsScrollContainer","closeButton","right","spacing","top","grey","DialogCloseButton","IconButton","Close","UnsavedPrompt","handleSaveAgreeClick","handleSaveDiscardClick","unsavedChanges","handlePromptConfirmSaveClick","onConfirm","handlePromptConfirmDiscardClick","when","isActive","onCancel","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","navPrompt","menuContainer","editModeButton","titleField","addSectionButton","deleteSongButton","dialogCloseButton","Song","setAlertMessage","setAlertIsError","setEditMode","delConfirmOpen","setDelConfirmOpen","saveOpen","setSaveOpen","titleError","setTitleError","useParams","snapshot","handleSaveClick","handleEditButtonClick","handleEditModeExitClick","handleEditModeEnterClick","getSongFromSnapshot","handleTitleChange","editTitle","handleAddSectionClick","addSection","handleDeleteAgreeClick","returnValue","deleteSong","_","isEmpty","isEqual","error","helperText","saveButton","DeleteForever","SnackbarAlert","message","isError","handleClose","Snackbar","autoHideDuration","Alert","severity","mainContainer","justifyContent","alignItems","contentContainer","App","alertMessage","alertIsError","useEffect","path","reason","composeEnhancers","composeWithDevTools","trace","reducers","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.8e93ea40.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { AppBar, Toolbar, Typography, Button } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    flexGrow: 1\n  },\n  title: {\n    fontSize: 20,\n    paddingRight: 15\n  },\n  buttonsDiv: {\n    flex: 1\n  },\n  linkButton: {\n    textDecoration: 'none',\n    color: 'white',\n    padding: 20\n  }\n}))\n\nconst NavBar = () => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <AppBar position='static'>\n        <Toolbar>\n          <Typography className={classes.title}>\n            SongWriter\n          </Typography>\n          <div className={classes.buttonsDiv}>\n            <Button component={Link} to={'/songs/'} color='inherit' className={classes.linkButton}>Your songs</Button>\n          </div>\n          <Button color='inherit' className={classes.logout}>Logout</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n\n  )\n}\n\nexport default NavBar","import React from 'react'\nimport { ListItem, makeStyles } from '@material-ui/core'\nimport { Link } from 'react-router-dom'\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles(() => ({\n  item: {\n\n  }\n}))\n\nconst SongListItem = ({ song }) => {\n  const classes = useStyles()\n\n  return (\n    <ListItem\n      component={Link}\n      to={`/songs/${song.id}`}\n      divider={true}\n      className={classes.item}\n    >\n      <h2>{song.title}</h2>\n    </ListItem>\n  )\n}\n\nSongListItem.propTypes = {\n  song: PropTypes.object.isRequired\n}\n\nexport default SongListItem","const linesArrayToString = (lines) => {\n  let string = ''\n  for (let i = 0; i < lines.length; i++) {\n    string = string.concat(lines[i])\n    if (i + 1 < lines.length) {  // If it's not the last line, add a newline\n      string = string.concat('\\n')\n    }\n  }\n  return string\n}\n\nconst linesStringToArray = (string) => {\n  const array = cutStringIntoLines(string)\n    .map(line => line = line.trim())\n    .filter(line => line !== '')\n\n  //console.log('Trimmed lines:', array)\n  return array\n}\n\nconst lineCount = (string) => {\n  return cutStringIntoLines(string).size\n}\n\nconst cutStringIntoLines = (string) => {\n  //console.log('Cutting:', string)\n  const cutLines = string.match(/[^\\r\\n]+/g)\n  return cutLines ? cutLines : []\n}\n\nconst getDefaultSong = () => {\n  return {\n    title: 'New song',\n    sections: [\n      {\n        id: 1,\n        name: 'New section',\n        lines: []\n      }\n    ]\n  }\n}\n\nconst addNewSection = (song) => {\n  if (song.sections.length === 0) {\n    song.sections = getDefaultSong().sections\n    return song\n  }\n\n  let maxId = song.sections.map(s => s.id).reduce((max, current) => current > max ? current : max) // Find the previously highest section id\n  const newSection = {\n    ...getDefaultSong().sections[0],\n    id: maxId + 1,\n  }\n  song.sections.push(newSection) // modifies the song directly\n  return song\n}\n\n\n\nexport default { linesArrayToString, linesStringToArray, lineCount, getDefaultSong, addNewSection }","import axios from 'axios'\nconst url = '/api/songs/'\n\nconst getAll = async () => {\n  console.log('Getting songs...')\n  const res = await axios.get(url)\n  return res.data\n}\n\nconst getOne = async (id) => {\n  const res = await axios.get(url + id)\n  return res.data\n}\n\nconst create = async (songObject) => {\n  console.log('Creating new song...')\n  const res = await axios.post(url, songObject)\n  return res.data\n}\n\nconst edit = async (songObject) => {\n  const res = await axios.put(url + songObject.id, songObject)\n  return res.data\n}\n\nconst destroy = async (id) => {\n  console.log('Deleting song with id:', id)\n  const res = await axios.delete(url + id)\n  return res.data\n}\n\nexport default { getAll, getOne, create, edit, destroy }","import songService from '../services/songService'\nimport songHelper from '../helpers/songHelper'\n\n// Action types\nexport const INIT_SONGS = 'INIT_SONGS'\nexport const CREATE_SONG = 'CREATE_SONG'\nexport const EDIT_SONG = 'EDIT_SONG'\nexport const ADD_SECTION = 'ADD_SECTION'\nexport const DELETE_SONG = 'DELETE_SONG'\nexport const EDIT_SECTION = 'EDIT_SECTION'\nexport const DELETE_SECTION = 'DELETE_SECTION'\n\n\n// Reducer\nconst songReducer = (state = [], action) => {\n  switch (action.type) {\n  case INIT_SONGS:\n    return action.data\n  case CREATE_SONG: {\n    const newState = state.concat(action.data)\n    return newState\n  }\n  case EDIT_SONG: {\n    const id = action.data.id\n    return state.map(song => song.id !== id ? song : action.data)\n  }\n  case DELETE_SONG:\n    return state.filter(song => song.id !== action.data.id)\n  case EDIT_SECTION: {\n    const songId = action.data.songId\n    const sectionId = action.data.section.id\n    const song = state.find(s => s.id === songId)\n    const editedSections = song.sections.map(section => section.id !== sectionId ? section : action.data.section)\n    return state.map(s => s.id !== songId ? s : { ...song, sections: editedSections })\n  }\n  case DELETE_SECTION: {\n    const songId = action.data.songId\n    const sectionId = action.data.section.id\n    const song = state.find(s => s.id === songId)\n    const editedSections = song.sections.filter(section => section.id !== sectionId)\n    return state.map(s => s.id !== songId ? s : { ...song, sections: editedSections })\n  }\n  default:\n    return state\n  }\n}\n\n// Song action creators\nexport const createSong = (song) => {\n  return async (dispatch) => {\n    try {\n      const createdSong = await songService.create(song)\n      console.log('Created:', createdSong)\n      dispatch({\n        type: CREATE_SONG,\n        data: createdSong\n      })\n      return createdSong\n    } catch (error) {\n      console.log(error)\n    }\n  }\n}\n\nexport const editTitle = (song, title) => {\n  let songToDispatch = JSON.parse(JSON.stringify(song))\n  songToDispatch.title = title\n\n  return async (dispatch) => {\n    dispatch({\n      type: EDIT_SONG,\n      data: songToDispatch\n    })\n  }\n}\n\n\nexport const initializeSongs = () => {\n  return async (dispatch) => {\n    try {\n      const songs = await songService.getAll()\n      console.log('Initialized:', songs)\n      dispatch({\n        type: INIT_SONGS,\n        data: songs\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n}\n\nexport const deleteSong = (song) => {\n  return async (dispatch) => {\n    try {\n      const returnValue = await songService.destroy(song.id)\n      console.log('Destroy returned:', returnValue)\n      dispatch({\n        type: DELETE_SONG,\n        data: song\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n}\n\n// Section action creators\nexport const editSection = (songId, section) => {\n  return async (dispatch) => {\n    dispatch({\n      type: EDIT_SECTION,\n      data: { songId, section }\n    })\n  }\n}\n\nexport const deleteSection = (songId, section) => {\n  return async (dispatch) => {\n    dispatch({\n      type: DELETE_SECTION,\n      data: { songId, section }\n    })\n  }\n}\n\nexport const addSection = (song) => {\n  let songToDispatch = JSON.parse(JSON.stringify(song))\n  songToDispatch = songHelper.addNewSection(songToDispatch)\n\n  return async (dispatch) => {\n    dispatch({\n      type: EDIT_SONG,\n      data: songToDispatch\n    })\n  }\n}\n\nexport const sortSections = (song, sortedSections) => {\n  let songToDispatch = JSON.parse(JSON.stringify(song))\n  songToDispatch.sections = sortedSections\n\n  return async (dispatch) => {\n    dispatch({\n      type: EDIT_SONG,\n      data: songToDispatch\n    })\n  }\n}\n\nexport const saveSong = (song) => {\n  return async (dispatch) => {\n    try {\n      const savedSong = await songService.edit(song)\n      dispatch({\n        type: EDIT_SONG,\n        data: savedSong\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n}\n\nexport const getSongFromSnapshot = (snapshot) => {\n  return async (dispatch) => {\n    dispatch({\n      type: EDIT_SONG,\n      data: snapshot\n    })\n  }\n}\n\nexport default songReducer","import React from 'react'\nimport { List, makeStyles, Button } from '@material-ui/core'\nimport SongListItem from './SongListItem'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Add } from '@material-ui/icons'\nimport songHelper from '../../helpers/songHelper'\nimport { createSong } from '../../redux/songReducer'\nimport { useHistory } from 'react-router'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n\n  },\n  addSongButton: {\n    margin: 8\n  }\n}))\n\nconst SongList = () => {\n  const classes = useStyles()\n  const songs = useSelector((state) => state.songs)\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  console.log('Rendered', songs.length, 'songs')\n\n  const handleNewSongClick = () => {\n    dispatch(createSong(songHelper.getDefaultSong())) // Note: not error handling createSong\n      .then(res => {\n        history.push('/songs/' + res.id)\n        console.log('Redirected!')\n      })\n      .catch(e => console.log('Error creating new song:', e))\n  }\n\n  const listSongs = () => songs.map(song =>\n    <SongListItem\n      key={song.id}\n      to={`/songs/${song.id}`}\n      song={song}\n    />\n  )\n\n  return (\n    <div className={classes.root}>\n      <h1>Songs</h1>\n      <List>\n        {songs.length !== 0 ? listSongs() : <p>No songs found</p>}\n      </List>\n      <Button\n        className={classes.addSongButton}\n        variant='contained'\n        color='primary'\n        startIcon={<Add />}\n        onClick={handleNewSongClick}\n      >\n        New song\n      </Button>\n    </div>\n  )\n}\n\nexport default SongList","export const SAVE_SNAPSHOT = 'SAVE_SNAPSHOT'\nexport const RESET_SNAPSHOT = 'RESET_SNAPSHOT'\n\nconst initialState = {} // Might upgrade to array at some point, maybe store in the database? (like version history)\n\nconst snapshotReducer = (state = initialState, action) => {\n  switch (action.type) {\n  case SAVE_SNAPSHOT:\n    return action.data\n  case RESET_SNAPSHOT:\n    return initialState\n  default:\n    return state\n  }\n}\n\nexport const saveSnapshot = (song) => {\n  console.log('Saving snapshot:', song)\n  return (dispatch) => {\n    dispatch({\n      type: SAVE_SNAPSHOT,\n      data: song\n    })\n  }\n}\n\nexport const resetSnapshot = () => {\n  console.log('Resetting snapshot')\n  return (dispatch) => {\n    dispatch({\n      type: RESET_SNAPSHOT\n    })\n  }\n}\n\nexport default snapshotReducer\n","import React, { useState } from 'react'\nimport { makeStyles, TextField, Button, Icon, Box } from '@material-ui/core'\nimport PropTypes from 'prop-types'\nimport songHelper from '../../helpers/songHelper'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { editSection, deleteSection } from '../../redux/songReducer'\n\nimport { SortableHandle } from 'react-sortable-hoc'\nimport { DragIndicator } from '@material-ui/icons'\n\nconst useStyles = makeStyles((theme) => ({\n  section: {\n    borderWidth: 2,\n    borderStyle: 'solid',\n    borderRadius: 5,\n    borderColor: theme.palette.primary.main,\n    padding: 20,\n    marginBottom: 3,\n    overflow: 'auto',\n    whiteSpace: 'nowrap',\n    backgroundColor: '#fff'\n  },\n  normalViewRoot: {\n    marginTop: -12,\n    marginBottom: -15\n  },\n  line: {\n    marginTop: -5\n  },\n  editForm: {\n    marginBottom: 15\n  },\n  nameField: {\n    marginBottom: 10\n  },\n  bottomDiv: {\n    display: 'flex'\n  },\n  lineSubmitButton: {\n    marginTop: 10,\n    marginBottom: -25\n  },\n  deleteButton: {\n    marginTop: 10,\n    marginBottom: -25,\n    marginLeft: 'auto'\n  },\n  dragHandle: {\n    marginLeft: 'auto',\n    marginTop: 10,\n    marginBottom: -25,\n  }\n}))\n\nconst SongSection = ({ songId, sectionId, editMode }) => {\n\n\n  // Local states for inputs only\n  //const [name, setName] = useState(section.name)\n  //const [linesString, setLinesString] = useState(songHelper.linesArrayToString(section.lines)) // Lines are a string while in state\n  const [deleteConfirm, setDeleteConfirm] = useState(false)\n\n  const classes = useStyles()\n  const dispatch = useDispatch()\n\n  const DragHandle = SortableHandle(() => <Box className={classes.dragHandle}> <Icon><DragIndicator /></Icon> </Box>)\n\n  const section = useSelector((state) => state.songs.find(s => s.id === songId).sections.find(s => s.id === sectionId))\n\n  const editView = () => {\n    return (\n      <form className={classes.editForm} >\n        <TextField className={classes.nameField} label='Edit name' name='name' defaultValue={section.name} onChange={handleNameChange} />\n        <div>\n          <TextField\n            multiline\n            label='Lines'\n            name='lines'\n            rows={section.lines.size}\n            defaultValue={songHelper.linesArrayToString(section.lines)}\n            onChange={handleLinesChange}\n            fullWidth={true}\n          />\n        </div>\n        <div className={classes.bottomDiv}>\n          <DragHandle />\n          <Button\n            className={classes.deleteButton}\n            size='small'\n            color='secondary'\n            variant='outlined'\n            onClick={handleDeleteClick}\n          >\n            {deleteConfirm ? 'Confirm deletion' : 'Delete'}\n          </Button>\n        </div>\n      </form>\n    )\n  }\n\n  const normalView = () => {\n    return (\n      <div className={classes.normalViewRoot}>\n        <h2>{section.name}</h2>\n        {section.lines.map((line, index) => {\n          return <p className={classes.line} key={index}>{line}</p>\n        })}\n      </div>\n    )\n  }\n\n  const handleNameChange = (event) => {\n    const editedSection = { ...section, lines: [...section.lines], name: event.target.value }\n    dispatch(editSection(songId, editedSection))\n  }\n\n  const handleLinesChange = (event) => {\n    const linesArray = songHelper.linesStringToArray(event.target.value)\n    const editedSection = { ...section, lines: linesArray }\n    dispatch(editSection(songId, editedSection))\n  }\n\n  const handleDeleteClick = (event) => {\n    event.preventDefault()\n    console.log('Delete button pressed!')\n    if (deleteConfirm) {\n      console.log('Delete for realz')\n      dispatch(deleteSection(songId, section))\n    } else {\n      setDeleteConfirm(true)\n    }\n  }\n\n  return (\n    <div className={classes.section}>\n      {editMode ? editView() : normalView()}\n    </div>\n  )\n}\n\nSongSection.propTypes = {\n  songId: PropTypes.string.isRequired,\n  sectionId: PropTypes.number.isRequired,\n  editMode: PropTypes.bool.isRequired\n}\n\nexport default SongSection","import React from 'react'\nimport { makeStyles, Container } from '@material-ui/core'\nimport SongSection from './SongSection'\nimport { SortableContainer, SortableElement } from 'react-sortable-hoc'\nimport arrayMove from 'array-move'\nimport { useDispatch } from 'react-redux'\nimport { sortSections } from '../../redux/songReducer'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n\n  }\n}))\n\nconst SortableItem = SortableElement(({ section, song, editMode }) => {\n  return (\n    <SongSection\n      songId={song.id}\n      sectionId={section.id}\n      editMode={editMode}\n    >\n    </SongSection>\n  )\n})\n\nconst SortableList = SortableContainer(({ song, editMode }) => {\n  return (\n    <Container maxWidth={false} align='left'>\n      {song.sections.map((section, index) => {\n        return (\n          <SortableItem\n            key={section.id}\n            index={index}\n            section={section}\n            song={song}\n            editMode={editMode}\n          />\n        )\n      })}\n    </Container>\n  )\n})\n\nconst SongSectionList = ({ song, editMode }) => {\n\n  const dispatch = useDispatch()\n  const classes = useStyles()\n\n  const handleSortEnd = ({ oldIndex, newIndex }) => {\n    const sortedSections = arrayMove(song.sections, oldIndex, newIndex)\n    dispatch(sortSections(song, sortedSections))\n  }\n\n  const renderSections = () => {\n    if (song.sections.length === 0) {\n      return (\n        <Container>\n          <h2>No sections</h2>\n        </Container>\n      )\n    }\n    return (\n      <SortableList\n        song={song}\n        editMode={editMode}\n        onSortEnd={handleSortEnd}\n        useDragHandle\n        useWindowAsScrollContainer\n      />\n    )\n  }\n\n  return (\n    renderSections()\n  )\n}\n\nexport default SongSectionList","import React from 'react'\nimport { makeStyles, IconButton } from '@material-ui/core'\nimport { Close } from '@material-ui/icons'\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  }\n}))\n\nconst DialogCloseButton = ({ onClick }) => {\n  const classes = useStyles()\n\n  return (\n    <IconButton className={classes.closeButton} onClick={onClick}>\n      <Close />\n    </IconButton>\n  )\n}\n\nDialogCloseButton.propTypes = {\n  onClick: PropTypes.func.isRequired\n}\n\nexport default DialogCloseButton","import React from 'react'\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core'\nimport NavigationPrompt from 'react-router-navigation-prompt'\nimport PropTypes from 'prop-types'\nimport DialogCloseButton from '../DialogCloseButton'\n\nconst UnsavedPrompt = ({ handleSaveAgreeClick, handleSaveDiscardClick, unsavedChanges }) => {\n\n  const navPrompt = (isActive, onCancel, onConfirm) => {\n    return (\n      <Dialog\n        open={isActive}\n        onClose={onCancel}\n      >\n        <DialogTitle>You have unsaved changes</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            If you leave without saving, all changes will be lost!\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handlePromptConfirmSaveClick(onConfirm)} color='primary' variant='contained'>\n            Save and leave\n          </Button>\n          <Button onClick={handlePromptConfirmDiscardClick(onConfirm)} color='secondary' variant='contained'>\n            Leave without saving\n          </Button>\n          <DialogCloseButton onClick={onCancel} />\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  const handlePromptConfirmSaveClick = (onConfirm) => () => {\n    handleSaveAgreeClick()\n    onConfirm()\n  }\n\n  const handlePromptConfirmDiscardClick = (onConfirm) => () => {\n    handleSaveDiscardClick()\n    onConfirm()\n  }\n\n  return (\n    <NavigationPrompt when={unsavedChanges()}>\n      {({ isActive, onCancel, onConfirm }) => navPrompt(isActive, onCancel, onConfirm) }\n    </NavigationPrompt>\n  )\n}\n\nUnsavedPrompt.propTypes = {\n  handleSaveAgreeClick: PropTypes.func.isRequired,\n  handleSaveDiscardClick: PropTypes.func.isRequired,\n  unsavedChanges: PropTypes.func.isRequired\n}\n\nexport default UnsavedPrompt","import React, { useState } from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport { makeStyles, Container, Button, TextField, DialogTitle, DialogContent, DialogContentText, DialogActions, Dialog } from '@material-ui/core'\nimport { Add, DeleteForever } from '@material-ui/icons'\nimport PropTypes from 'prop-types'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { editTitle, addSection, deleteSong, saveSong, getSongFromSnapshot } from '../../redux/songReducer'\nimport { saveSnapshot, resetSnapshot } from '../../redux/snapshotReducer'\nimport SongSectionList from './SongSectionList'\nimport _ from 'lodash'\nimport UnsavedPrompt from './UnsavedPrompt'\nimport DialogCloseButton from '../DialogCloseButton'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n\n  },\n  menuContainer: {\n    marginBottom: theme.spacing(1)\n  },\n  editModeButton: {\n    marginLeft: theme.spacing(1)\n  },\n  titleField: {\n    margin: 15\n  },\n  addSectionButton: {\n    marginTop: theme.spacing(1)\n  },\n  deleteSongButton: {\n    marginLeft: 'auto'\n  },\n  dialogCloseButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  }\n}))\n\nconst Song = ({ setAlertMessage, setAlertIsError }) => {\n  const [editMode, setEditMode] = useState(false)\n  const [delConfirmOpen, setDelConfirmOpen] = useState(false)\n  const [saveOpen, setSaveOpen] = useState(false)\n  const [titleError, setTitleError] = useState(false)\n\n  const classes = useStyles()\n  const id = useParams().id\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  const song = useSelector((state) => state.songs.find(s => s.id === id))\n\n  const snapshot = useSelector((state) => state.snapshot)\n\n  console.log('Song render:', song)\n\n  const renderTitle = () => {\n    if (editMode) {\n      return (\n        <TextField\n          error={titleError}\n          className={classes.titleField}\n          label='Edit title'\n          defaultValue={song.title}\n          onChange={handleTitleChange}\n          helperText={titleError ? 'Title cannot be empty!' : ''} // Todo: enforce\n        />\n      )\n    } else {\n      return (\n        <h1>{song.title}</h1>\n      )\n    }\n  }\n\n  const saveButton = () => {\n    if (unsavedChanges()) {\n      return (\n        <Button\n          color='primary'\n          variant='outlined'\n          onClick={handleSaveClick}\n        >\n          Save changes\n        </Button>\n      )\n    }\n  }\n\n  const editModeButton = () => {\n    return (\n      <Button\n        color='primary'\n        variant='contained'\n        onClick={handleEditButtonClick}\n        className={classes.editModeButton}\n      >\n        {editMode ? 'Exit edit mode' : 'Edit mode'}\n      </Button>\n    )\n  }\n\n  const addSectionButton = () => {\n    if (editMode) {\n      return (\n        <Button\n          className={classes.addSectionButton}\n          variant='contained'\n          color='primary'\n          startIcon={<Add />}\n          onClick={handleAddSectionClick}\n        >\n          New section\n        </Button>\n      )\n    }\n    return (<div/>)\n  }\n\n  const deleteSongButton = () => {\n    if (editMode) {\n      return (\n        <Button\n          className={classes.deleteSongButton}\n          variant='contained'\n          color='secondary'\n          startIcon={<DeleteForever />}\n          onClick={() => setDelConfirmOpen(true)}\n        >\n          Delete song\n        </Button>\n      )\n    }\n    return (<div/>)\n  }\n\n  const deleteDialog = () => {\n    return (\n      <Dialog\n        open={delConfirmOpen}\n        onClose={() => setDelConfirmOpen(false)}\n      >\n        <DialogTitle>Delete this song?</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Once deleted, this song cannot be restored (not even by discarding changes when exiting Edit Mode).\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleDeleteAgreeClick} color='secondary' variant='contained'>\n            Delete permanently\n          </Button>\n          <Button onClick={() => setDelConfirmOpen(false)} variant='contained'>\n            Cancel\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  const saveDialog = () => {\n    return (\n      <Dialog\n        open={saveOpen}\n        onClose={() => setSaveOpen(false)}\n      >\n        <DialogTitle>Save changes?</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Save or discard the changes you have made.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleSaveAgreeClick} color='primary' variant='contained'>\n            Save changes\n          </Button>\n          <Button onClick={handleSaveDiscardClick} color='secondary' variant='contained'>\n            Discard changes\n          </Button>\n          <DialogCloseButton onClick={() => setSaveOpen(false)} />\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  const handleSaveClick = () => {\n    dispatch(saveSnapshot(song))\n    dispatch(saveSong(song))\n  }\n\n  const handleEditButtonClick = () => {\n    if (editMode) {\n      handleEditModeExitClick()\n    } else {\n      handleEditModeEnterClick()\n    }\n  }\n\n  const handleEditModeEnterClick = () => {\n    dispatch(saveSnapshot(song))\n    setEditMode(true)\n  }\n\n  const handleEditModeExitClick = () => {\n    console.log('Exiting edit mode')\n    if (unsavedChanges()) {\n      setSaveOpen(true)\n    } else {\n      setEditMode(false)\n      dispatch(resetSnapshot())\n    }\n  }\n\n  const handleSaveAgreeClick = () => {\n    console.log('Saving!')\n    setSaveOpen(false)\n    setEditMode(false)\n    dispatch(resetSnapshot())\n    dispatch(saveSong(song))\n  }\n\n  const handleSaveDiscardClick = () => {\n    console.log('Discarding changes!')\n    setSaveOpen(false)\n    setEditMode(false)\n    dispatch(resetSnapshot())\n    dispatch(getSongFromSnapshot(snapshot))\n    console.log('Snapshot after reset:', snapshot)\n  }\n\n  const handleTitleChange = (event) => {\n    if (event.target.value === '') {\n      setTitleError(true)\n    } else if (titleError) {\n      setTitleError(false)\n    }\n    dispatch(editTitle(song, event.target.value))\n  }\n\n  const handleAddSectionClick = () => {\n    console.log('Add new section!')\n    dispatch(addSection(song))\n  }\n\n  const handleDeleteAgreeClick = () => {\n    console.log('Deleting song here')\n    dispatch(deleteSong(song))\n    history.push('/songs/')\n  }\n\n  const unsavedChanges = () => {\n    return !_.isEmpty(snapshot) && !_.isEqual(snapshot, song)\n  }\n\n  if (song) {\n    return (\n      <div className={classes.root}>\n        {renderTitle()}\n        <div>\n          <Container align='right' maxWidth={false} className={classes.menuContainer}>\n            {saveButton()}\n            {editModeButton()}\n          </Container>\n          <SongSectionList song={song} editMode={editMode} />\n        </div>\n        <Container maxWidth={false}>\n          {addSectionButton()}\n        </Container>\n        <Container align='right' maxWidth={false}>\n          {deleteSongButton()}\n        </Container>\n        {deleteDialog()}\n        {saveDialog()}\n        <UnsavedPrompt\n          handleSaveAgreeClick={handleSaveAgreeClick}\n          handleSaveDiscardClick={handleSaveDiscardClick}\n          unsavedChanges={unsavedChanges}\n        />\n      </div>\n    )\n  } else {\n    return (\n      <div>\n        <h1>Loading</h1>\n        <p>Check the url if it takes too long</p>\n      </div>\n    )\n  }\n}\n\nSong.propTypes = {\n  setAlertIsError: PropTypes.func.isRequired,\n  setAlertMessage: PropTypes.func.isRequired\n}\n\nexport default Song","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport Alert from '@material-ui/lab/Alert'\nimport PropTypes from 'prop-types'\n\n//const Alert = (props) => {\n//  return <MuiAlert elevation={6} variant='filled' {...props} />\n//}\n\nconst SnackbarAlert = ({ message, isError, handleClose }) => {\n  return (\n    <div>\n      <Snackbar open={message !== ''} autoHideDuration={5000} onClose={handleClose}>\n        <Alert\n          variant='filled'\n          onClose={handleClose}\n          severity={isError ? 'error' : 'success'}\n        >\n          {message}\n        </Alert>\n      </Snackbar>\n    </div>\n  )\n}\n\nSnackbarAlert.propTypes = {\n  message: PropTypes.string.isRequired,\n  isError: PropTypes.bool.isRequired,\n  handleClose: PropTypes.func.isRequired\n}\n\nexport default SnackbarAlert","import React, { useState, useEffect } from 'react'\nimport NavBar from './components/NavBar'\nimport { makeStyles, Container } from '@material-ui/core'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport SongList from './components/songs/SongList'\nimport Song from './components/songs/Song'\nimport SnackbarAlert from './components/SnackbarAlert'\nimport { initializeSongs } from './redux/songReducer'\nimport { useDispatch } from 'react-redux'\n\nconst useStyles = makeStyles(() => ({\n  mainContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20\n  },\n  contentContainer: {\n\n  }\n}))\n\nconst App = () => {\n  console.log('App render')\n  const [alertMessage, setAlertMessage] = useState('')\n  const [alertIsError, setAlertIsError] = useState(false)\n  //const [open, setOpen] = useState(false)\n\n  const classes = useStyles()\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    console.log('App effect')\n    dispatch(initializeSongs())\n  }, [dispatch])\n\n  const handleAlertClose = (event, reason) => {\n    if (reason === 'clickaway') return\n\n    setAlertMessage('')\n  }\n\n  return (\n    <>\n      <Router>\n        <NavBar/>\n        <Container maxWidth={false} className={classes.mainContainer}>\n          <Container maxWidth={false} align='center' className={classes.contentContainer}>\n            <Switch>\n              <Route path='/songs/:id'>\n                <Song\n                  setAlertMessage={setAlertMessage}\n                  setAlertIsError={setAlertIsError}\n                />\n              </Route>\n              <Route path='/songs/'>\n                <SongList/>\n              </Route>\n              <Route path='/'><p>Welcome</p></Route>\n            </Switch>\n          </Container>\n          <SnackbarAlert\n            message={alertMessage}\n            isError={alertIsError}\n            handleClose={handleAlertClose}\n          />\n        </Container>\n      </Router>\n    </>\n  )\n}\n\nexport default App\n","import { createStore, applyMiddleware, combineReducers } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport songReducer from './songReducer'\nimport snapshotReducer from './snapshotReducer'\n\nconst composeEnhancers = composeWithDevTools({ trace: true })\n\nconst reducers = combineReducers({\n  songs: songReducer,\n  snapshot: snapshotReducer\n})\n\nconst store = createStore(\n  reducers,\n  composeEnhancers(\n    applyMiddleware(thunk)\n  )\n)\n\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { CssBaseline } from '@material-ui/core'\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n  //<React.StrictMode> // MAKES EVERYTHING RENDER TWICE!\n  <CssBaseline>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </CssBaseline>,\n  //</React.StrictMode>\n  document.getElementById('root')\n)\n"],"sourceRoot":""}