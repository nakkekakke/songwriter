{"version":3,"sources":["components/Heading.js","services/userService.js","components/nav/LogButton.js","components/nav/NavButton.js","components/nav/NavButtonsDiv.js","components/DarkModeSwitch.js","components/nav/NavBar.js","components/songs/dialogs/DeleteDialog.js","components/songlist/SongMenu.js","components/songlist/SongListItem.js","components/songlist/SortableSongList.js","components/songlist/SongList.js","components/songs/sections/SongSection.js","components/songs/sections/SortableSectionList.js","components/songs/sections/SongSectionList.js","components/songs/dialogs/DialogCloseButton.js","components/songs/dialogs/UnsavedPrompt.js","components/songs/dialogs/SaveDialog.js","components/songs/Song.js","components/app/AuthenticatedApp.js"],"names":["useStyles","makeStyles","header","marginTop","Heading","text","classes","component","variant","className","url","create","username","password","a","axios","post","res","data","usernameAvailable","editSongs","songs","songIds","map","s","id","put","headers","getAuthHeader","LogButton","loggedIn","dispatch","useDispatch","history","useHistory","Button","color","onClick","logout","showAlert","alerts","push","navButton","textDecoration","padding","NavButton","path","Link","to","root","flex","NavButtonsDiv","DarkModeSwitch","darkMode","useSelector","state","statuses","FormControlLabel","control","Switch","checked","onChange","toggleDarkMode","label","labelPlacement","style","margin","marginRight","flexGrow","title","fontSize","paddingRight","NavBar","AppBar","position","Toolbar","Typography","DeleteDialog","open","setOpen","handleConfirmClick","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","SongMenu","song","useState","anchorTo","setAnchorTo","delConfirmOpen","setDelConfirmOpen","user","auth","handleClose","IconButton","event","target","MoreVert","Menu","anchorEl","elevation","keepMounted","MenuItem","cloneSong","deleteSong","theme","item","palette","primary","main","container","display","justifyContent","textAlign","marginBottom","DragHandle","SortableHandle","Box","marginLeft","Icon","DragIndicator","SongListItem","Container","maxWidth","ListItem","divider","SortableSong","SortableElement","SortableSongList","SortableContainer","align","index","key","list","addSongButton","SongList","handleSortEnd","oldIndex","newIndex","sortedSongs","arrayMove","sortSongs","userService","dataDesync","List","length","onSortEnd","useWindowAsScrollContainer","useDragHandle","createSong","songHelper","getDefaultSong","then","catch","console","log","startIcon","Add","section","borderWidth","borderStyle","borderRadius","borderColor","overflow","whiteSpace","backgroundColor","background","paper","normalViewRoot","name","linesDiv","line","editForm","nameField","bottomDiv","lineSubmitButton","cloneButton","deleteButton","dragHandle","SongSection","songId","sectionId","deleteConfirm","setDeleteConfirm","find","sections","nameError","errors","e","type","SECTION_NAME_ERROR","lineError","SECTION_LINES_ERROR","editMode","showChords","chords","linesOnKeyDown","shiftKey","preventDefault","value","selectionStart","selectionEnd","substring","lineWithSpaces","replace","handleNameChange","editedSection","lines","createError","removeError","editSection","handleLinesChange","linesArray","linesStringToArray","validateLines","handleCloneClick","cloneSection","handleDeleteClick","deleteSection","TextField","defaultValue","error","undefined","helperText","multiline","onKeyDown","linesArrayToString","rows","size","fullWidth","addChordsToLine","SortableSection","SortableSectionList","SongSectionList","sortedSections","sortSections","closeButton","right","spacing","top","grey","DialogCloseButton","Close","UnsavedPrompt","handleSaveConfirmClick","handleSaveDiscardClick","unsavedChanges","saveAllowed","saveButton","onConfirm","handlePromptSaveClick","disabledSaveButton","Tooltip","arrow","disabled","handlePromptDiscardClick","when","isActive","onCancel","navPrompt","SaveDialog","handleDiscardClick","menuContainer","chordToggleSwitch","editModeSwitch","titleField","addSectionButton","deleteSongButton","Song","saveOpen","setSaveOpen","useParams","songErrors","titleError","SONG_TITLE_ERROR","snapshot","useEffect","resetSnapshot","resetSongStatuses","handleChordsSwitchClick","toggleChords","handleSaveClick","saveSnapshot","saveSong","handleEditSwitchClick","handleEditModeExitClick","handleEditModeEnterClick","toggleEditMode","getSongFromSnapshot","handleTitleChange","editTitle","handleAddSectionClick","addSection","_","isEmpty","isEqual","width","chordsSwitch","DeleteForever","mainContainer","alignItems","AuthenticatedApp","initializeSongs"],"mappings":"sGAAA,sCAIMA,EAAYC,aAAW,iBAAO,CAClCC,OAAQ,CACNC,UAAW,QAiBAC,IAbC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACXC,EAAUN,IAChB,OACE,kBAAC,IAAD,CAAYO,UAAU,KAAKC,QAAQ,KAAKC,UAAWH,EAAQJ,QACxDG,K,qFCZDK,EAAM,aAMNC,EAAM,uCAAG,WAAOC,EAAUC,GAAjB,eAAAC,EAAA,sEACKC,IAAMC,KAAKN,EAAK,CAAEE,WAAUC,aADjC,cACPI,EADO,yBAENA,EAAIC,MAFE,2CAAH,wDAKNC,EAAiB,uCAAG,WAAOP,GAAP,eAAAE,EAAA,sEACNC,IAAMC,KAAKN,EAAM,sBAAuB,CAAEE,aADpC,cAClBK,EADkB,yBAEjBA,EAAIC,MAFa,2CAAH,sDAKjBE,EAAS,uCAAG,WAAOR,EAAUS,GAAjB,iBAAAP,EAAA,6DACVQ,EAAUD,EAAME,KAAI,SAAAC,GAAC,OAAIA,EAAEC,MADjB,SAEEV,IAAMW,IAAIhB,EAAM,SAAU,CAAEE,WAAUU,WAfjD,CAAEK,QAASC,gBAaF,cAEVX,EAFU,yBAGTA,EAAIC,MAHK,2CAAH,wDAMA,KAAEP,SAAQQ,oBAAmBC,c,mICW7BS,EA3BG,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEbC,EAAWC,cACXC,EAAUC,cAUhB,OACE,kBAACC,EAAA,EAAD,CACEC,MAAM,UACNC,QAXmB,WACjBP,IACFC,EAASO,eACTP,EAASQ,YAAUC,IAAOF,UAE5BL,EAAQQ,KAAK,OAQVX,EAAW,UAAY,W,SCrBxB9B,EAAYC,aAAW,iBAAO,CAClCyC,UAAW,CACTC,eAAgB,OAChBP,MAAO,QACPQ,QAAS,QA0BEC,EAtBG,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,KAAMzC,EAAoB,EAApBA,KAAMgC,EAAc,EAAdA,QACzB/B,EAAUN,IAEhB,OACE,kBAACmC,EAAA,EAAD,CACE5B,UAAWwC,OACXC,GAAIF,EACJT,QAASA,EACTD,MAAM,UACN3B,UAAWH,EAAQoC,WAElBrC,ICnBDL,EAAYC,aAAW,iBAAO,CAClCgD,KAAM,CACJC,KAAM,OA0BKC,EAtBO,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SACjBxB,EAAUN,IAUhB,OACE,yBAAKS,UAAWH,EAAQ2C,MACrBnB,EATI,kBAAC,EAAD,CAAWgB,KAAK,UAAUzC,KAAK,eAI/B,iC,0BCKI+C,EAnBQ,WACrB,IAAMrB,EAAWC,cACXqB,EAAWC,aAAY,SAACC,GAAD,OAAWA,EAAMC,SAASH,YAEvD,OACE,kBAACI,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CAAQC,QAASP,EACfQ,SAAU,kBAAM9B,EAAS+B,gBACzB1B,MAAM,cAGV2B,MAAM,YACNC,eAAe,MACfC,MAAO,CAAEC,OAAQ,EAAGC,YAAa,OCXjCnE,EAAYC,aAAW,iBAAO,CAClCgD,KAAM,CACJmB,SAAU,GAEZC,MAAO,CACLC,SAAU,GACVC,aAAc,QA4BHC,IAxBA,SAAC,GAAkB,IAAhB1C,EAAe,EAAfA,SACVxB,EAAUN,IAEhB,OACE,yBAAKS,UAAWH,EAAQ2C,MACtB,kBAACwB,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYnE,UAAWH,EAAQ+D,OAA/B,cAGA,kBAAC,EAAD,CAAevC,SAAUA,IACzB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAcA,SAAUA,S,mUCQnB+C,EAlCM,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,mBACrC,OACE,kBAACC,EAAA,EAAD,CACEH,KAAMA,EACNI,QAAS,kBAAMH,GAAQ,KAEvB,kBAACI,EAAA,EAAD,0BACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,qDAIF,kBAACC,EAAA,EAAD,KACE,kBAACnD,EAAA,EAAD,CACEE,QAAS2C,EACT5C,MAAM,YACN5B,QAAQ,aAHV,sBAOA,kBAAC2B,EAAA,EAAD,CAAQE,QAAS,kBAAM0C,GAAQ,IAAQvE,QAAQ,aAA/C,aC4DO+E,EA5EE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACGC,mBAAS,MADZ,mBACtBC,EADsB,KACZC,EADY,OAEeF,oBAAS,GAFxB,mBAEtBG,EAFsB,KAENC,EAFM,KAIvB9D,EAAWC,cACX8D,EAAOxC,aAAY,SAACC,GAAD,OAAWA,EAAMwC,KAAKD,QACzCzC,EAAWC,aAAY,SAACC,GAAD,OAAWA,EAAMC,SAASH,YAMjD2C,EAAc,WAClBL,EAAY,OAiBd,OACE,oCACE,kBAACM,EAAA,EAAD,CACE5D,QAzBc,SAAC6D,GACnBP,EAAYO,EAAMC,UA0Bd,kBAACC,EAAA,EAAD,OAEF,kBAACC,EAAA,EAAD,CACEnB,QAASc,EACTlB,KAAmB,OAAbY,EACNY,SAAUZ,EACVa,UAAW,EACXC,aAAW,GAEX,kBAACC,EAAA,EAAD,KACE,kBAACtE,EAAA,EAAD,CACEE,QA9Be,WACvBN,EAAS2E,YAAUlB,EAAMM,EAAKlF,WAC9BoF,KA6BQxF,QAAS6C,EAAW,YAAc,WAClCjB,MAAM,WAHR,UAQF,kBAACqE,EAAA,EAAD,KACE,kBAACtE,EAAA,EAAD,CACEE,QAlCgB,WACxBwD,GAAkB,GAClBG,KAiCQxF,QAAS6C,EAAW,YAAc,WAClCjB,MAAM,aAHR,YASJ,kBAAC,EAAD,CACE0C,KAAMc,EACNb,QAASc,EACTb,mBAxC2B,WAC/BjD,EAAS4E,YAAWnB,S,SC3BlBxF,EAAYC,aAAW,SAAC2G,GAAD,MAAY,CACvCC,KAAM,CACJzE,MAAOwE,EAAME,QAAQC,QAAQC,MAE/BC,UAAW,CACTC,QAAS,OACTC,eAAgB,iBAElB9C,MAAO,CACL+C,UAAW,OACXjH,UAAW,EACXkH,aAAc,OAIZC,EAAaC,aAAe,kBAChC,kBAACC,EAAA,EAAD,CAAKvD,MAAO,CAAE9D,UAAW,GAAIsH,YAAa,KACxC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,WA8BSC,EAzBM,SAAC,GAAc,IAAZpC,EAAW,EAAXA,KAChBlF,EAAUN,IAEhB,OACE,kBAAC6H,EAAA,EAAD,CAAWC,SAAS,KAAKrH,UAAWH,EAAQ2G,WAC1C,kBAAC,EAAD,MACA,kBAACc,EAAA,EAAD,CACExH,UAAWwC,OACXC,GAAE,iBAAYwC,EAAK/D,IACnBuG,SAAS,EACTvH,UAAWH,EAAQuG,MAEnB,kBAACjC,EAAA,EAAD,CAAYpE,QAAQ,KAAKC,UAAWH,EAAQ+D,OACzCmB,EAAKnB,QAGV,kBAAC,EAAD,CAAUmB,KAAMA,MC1ChByC,EAAeC,aAAgB,YAAe,IAAZ1C,EAAW,EAAXA,KACtC,OACE,kBAAC,EAAD,CAAcA,KAAMA,OAoBT2C,EAhBUC,aAAkB,YAAgB,IAAb/G,EAAY,EAAZA,MAC5C,OACE,kBAACwG,EAAA,EAAD,CAAWC,UAAU,EAAOO,MAAM,QAC/BhH,EAAME,KAAI,SAACiE,EAAM8C,GAChB,OACE,kBAACL,EAAD,CACEM,IAAK/C,EAAK/D,GACV6G,MAAOA,EACP9C,KAAMA,W,mCCNZxF,EAAYC,aAAW,iBAAO,CAClCuI,KAAM,CACJrI,UAAW,IAEbsI,cAAe,CACbvE,OAAQ,OA4DGwE,EAxDE,WACf,IAAMpI,EAAUN,IACVqB,EAAQiC,aAAY,SAACC,GAAD,OAAWA,EAAMlC,SACrCyE,EAAOxC,aAAY,SAACC,GAAD,OAAWA,EAAMwC,KAAKD,QACzC/D,EAAWC,cACXC,EAAUC,cAUVyG,EAAa,uCAAG,iCAAA7H,EAAA,6DAAS8H,EAAT,EAASA,SAAUC,EAAnB,EAAmBA,SACjCC,EAAcC,IAAU1H,EAAOuH,EAAUC,GAC/C9G,EAASiH,YAAUF,IAFC,kBAIZG,IAAY7H,UAAU0E,EAAKlF,SAAUkI,GAJzB,uDAMlB/G,EAASQ,YAAUC,IAAO0G,aANR,yDAAH,sDAqBnB,OACE,6BACE,kBAAC9I,EAAA,EAAD,CAASC,KAAK,eAEd,kBAAC8I,EAAA,EAAD,CAAM1I,UAAWH,EAAQkI,MACL,IAAjBnH,EAAM+H,OAdT,kBAAC,EAAD,CACE/H,MAAOA,EACPgI,UAAWV,EACXW,4BAA0B,EAC1BC,eAAa,IAUsB,8CAErC,kBAACpH,EAAA,EAAD,CACEE,QArCqB,WACzBN,EAASyH,YAAWC,IAAWC,eAAe5D,KAC3C6D,MAAK,SAAA1I,GACJgB,EAAQQ,KAAK,UAAYxB,EAAIQ,OAE9BmI,OAAM,kBAAMC,QAAQC,IAAI,2BAiCvBtJ,QAAQ,YACR4B,MAAM,UACN2H,UAAW,kBAACC,EAAA,EAAD,MACXvJ,UAAWH,EAAQmI,eALrB,c,sECvDAzI,GAAYC,aAAW,SAAC2G,GAAD,MAAY,CACvCqD,QAAS,CACPC,YAAa,EACbC,YAAa,QACbC,aAAc,EACdC,YAAazD,EAAME,QAAQC,QAAQC,KACnCpE,QAAS,GACTyE,aAAc,EACdiD,SAAU,OACVC,WAAY,SACZC,gBAAiB5D,EAAME,QAAQ2D,WAAWC,OAE5CC,eAAgB,CACdxK,WAAY,GACZkH,cAAe,IAEjBuD,KAAM,CACJzK,UAAW,IAEb0K,SAAU,CACR1K,UAAW,GACXkH,aAAc,IAEhByD,KAAM,CACJzD,aAAc,GAEhB0D,SAAU,CACR1D,aAAc,IAEhB2D,UAAW,CACT3D,aAAc,IAEhB4D,UAAW,CACT/D,QAAS,QAEXgE,iBAAkB,CAChB/K,UAAW,GACXkH,cAAe,IAEjB8D,YAAa,CACXhL,UAAW,GACXkH,cAAe,IAEjB+D,aAAc,CACZjL,UAAW,GACXkH,cAAe,GACfI,WAAY,QAEd4D,WAAY,CACV5D,WAAY,OACZtH,UAAW,GACXkH,cAAe,QAmKJiE,GA/JK,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,UAAgB,EACH/F,oBAAS,GADN,mBACtCgG,EADsC,KACvBC,EADuB,KAGvCpL,EAAUN,KACV+B,EAAWC,cAEXsF,EAAaC,aAAe,kBAChC,kBAACC,EAAA,EAAD,CACE/G,UAAWH,EAAQ+K,YACnB,kBAAC3D,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,WAKAsC,EAAU3G,aAAY,SAACC,GAAD,OAAWA,EAAMlC,MAAMsK,MAAK,SAAAnK,GAAC,OAAIA,EAAEC,KAAO8J,KAAQK,SAASD,MAAK,SAAAnK,GAAC,OAAIA,EAAEC,KAAO+J,QACpGK,EAAYvI,aAAY,SAACC,GAAD,OAAWA,EAAMuI,OAAOH,MAAK,SAAAI,GAAC,OAAIA,EAAEC,OAASF,KAAOG,oBAAsBF,EAAEtK,KAAO+J,QAC3GU,EAAY5I,aAAY,SAACC,GAAD,OAAWA,EAAMuI,OAAOH,MAAK,SAAAI,GAAC,OAAIA,EAAEC,OAASF,KAAOK,qBAAuBJ,EAAEtK,KAAO+J,QAC5GY,EAAW9I,aAAY,SAACC,GAAD,OAAWA,EAAMC,SAAS4I,YACjDC,EAAa/I,aAAY,SAACC,GAAD,OAAWA,EAAMC,SAAS8I,UACnDjJ,EAAWC,aAAY,SAACC,GAAD,OAAWA,EAAMC,SAASH,YAGjDkJ,EAAiB,SAACrG,GACtB,GAAkB,QAAdA,EAAMqC,MAAkBrC,EAAMsG,SAAU,CAC1CtG,EAAMuG,iBACN,IAAMC,EAAQxG,EAAMC,OAAOuG,MACrBC,EAAiBzG,EAAMC,OAAOwG,eAC9BC,EAAe1G,EAAMC,OAAOyG,aAClC1G,EAAMC,OAAOuG,MAAQA,EAAMG,UAAU,EAAGF,GAAkB,OAASD,EAAMG,UAAUD,GACnF1G,EAAMC,OAAOwG,eAAiBC,EAAe,GAAKA,EAAeD,GACjEzG,EAAMC,OAAOyG,aAAeA,EAAe,GAAKA,EAAeD,KA4E7DG,EAAiB,SAAChC,GACtB,OAAOA,EAAKiC,QAAQ,KAAM,SAGtBC,EAAmB,SAAC9G,GACxB,IAAM0E,EAAO1E,EAAMC,OAAOuG,MACpBO,EAAa,6BAAQhD,GAAR,IAAiBiD,MAAM,aAAKjD,EAAQiD,OAAQtC,SAC3C,IAAhBA,EAAKxB,QAAgBwB,EAAKxB,OAAS,GACrCrH,EAASoL,aAAYrB,KAAOG,mBAAoBT,IAEhDzJ,EAASqL,aAAYtB,KAAOG,mBAAoBT,IAElDzJ,EAASsL,YAAY9B,EAAQ0B,KAGzBK,EAAoB,SAACpH,GACzB,IAAMqH,EAAa9D,IAAW+D,mBAAmBtH,EAAMC,OAAOuG,OACxDO,EAAa,6BAAQhD,GAAR,IAAiBiD,MAAOK,IACtC9D,IAAWgE,cAAcF,GAG5BxL,EAASqL,aAAYtB,KAAOK,oBAAqBX,IAFjDzJ,EAASoL,aAAYrB,KAAOK,oBAAqBX,IAInDzJ,EAASsL,YAAY9B,EAAQ0B,KAGzBS,EAAmB,WACvB7D,QAAQC,IAAI,UAAWG,GACvBlI,EAAS4L,YAAapC,EAAQtB,KAG1B2D,EAAoB,SAAC1H,GACzBA,EAAMuG,iBACFhB,EACF1J,EAAS8L,YAActC,EAAQtB,IAE/ByB,GAAiB,IAIrB,OACE,yBAAKjL,UAAWH,EAAQ2J,SACrBmC,EAhHD,0BAAM3L,UAAWH,EAAQyK,UACvB,kBAAC+C,EAAA,EAAD,CACE/J,MAAM,YACN6G,KAAK,OACL/G,SAAUmJ,EACVe,aAAc9D,EAAQW,KACtBoD,WAAqBC,IAAdpC,EACPqC,WAAYrC,EAAY,iCAAmC,GAC3DpL,UAAWH,EAAQ0K,YAErB,6BACE,kBAAC8C,EAAA,EAAD,CACEK,WAAS,EACTpK,MAAM,QACN6G,KAAK,QACL/G,SAAUyJ,EACVc,UAAW7B,EACXwB,aAActE,IAAW4E,mBAAmBpE,EAAQiD,OACpDoB,KAAMrE,EAAQiD,MAAMqB,KACpBP,WAAqBC,IAAd/B,EACPsC,WAAW,EACXN,WAAYhC,EAAY,kCAAoC,MAGhE,yBAAKzL,UAAWH,EAAQ2K,WACtB,kBAAC9I,EAAA,EAAD,CACEE,QAASqL,EACTa,KAAK,QACLnM,MAAM,UACN5B,QAAS6C,EAAW,YAAc,WAClC5C,UAAWH,EAAQ6K,aALrB,SASA,kBAAC7D,EAAD,MACA,kBAACnF,EAAA,EAAD,CACEE,QAASuL,EACTW,KAAK,QACLnM,MAAM,YACN5B,QAAS6C,EAAW,YAAc,WAClC5C,UAAWH,EAAQ8K,cAElBK,EAAgB,mBAAqB,YAS5C,yBAAKhL,UAAWH,EAAQqK,gBACtB,kBAAC/F,EAAA,EAAD,CAAYpE,QAAQ,KAAKC,UAAWH,EAAQsK,MACzCX,EAAQW,MAEX,yBAAKnK,UAAWH,EAAQuK,UACrBZ,EAAQiD,MAAM3L,KAAI,SAACuJ,EAAMxC,GACxB,OACE,yBAAKC,IAAKD,GACR,kBAAC1D,EAAA,EAAD,CAAYpE,QAAQ,QAAQC,UAAWH,EAAQwK,MAC5CuB,EAAa5C,IAAWgF,gBAAgB3D,GAAQgC,EAAehC,YC7J5E4D,GAAkBxG,aAAgB,YAAwB,IAArB+B,EAAoB,EAApBA,QAASzE,EAAW,EAAXA,KAClD,OACE,kBAAC,GAAD,CACE+F,OAAQ/F,EAAK/D,GACb+J,UAAWvB,EAAQxI,QAuBVkN,GAjBavG,aAAkB,YAAe,IAAZ5C,EAAW,EAAXA,KAC/C,OACE,kBAACqC,EAAA,EAAD,CAAWC,UAAU,EAAOO,MAAM,QAC/B7C,EAAKoG,SAASrK,KAAI,SAAC0I,EAAS3B,GAC3B,OACE,kBAACoG,GAAD,CACEnG,IAAK0B,EAAQxI,GACb6G,MAAOA,EACP2B,QAASA,EACTzE,KAAMA,WCgBHoJ,GAhCS,SAAC,GAAc,IAAZpJ,EAAW,EAAXA,KAEnBzD,EAAWC,cAEX2G,EAAgB,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAC3BgG,EAAiB9F,IAAUvD,EAAKoG,SAAUhD,EAAUC,GAC1D9G,EAAS+M,YAAatJ,EAAMqJ,KAqB9B,OAjB+B,IAAzBrJ,EAAKoG,SAASxC,OAEd,kBAACvB,EAAA,EAAD,KACE,4CAKJ,kBAAC,GAAD,CACErC,KAAMA,EACN6D,UAAWV,EACXY,eAAa,EACbD,4BAA0B,K,8DCzB5BtJ,GAAYC,aAAW,SAAC2G,GAAD,MAAY,CACvC3D,KAAM,GAGN8L,YAAa,CACXrK,SAAU,WACVsK,MAAOpI,EAAMqI,QAAQ,GACrBC,IAAKtI,EAAMqI,QAAQ,GACnB7M,MAAOwE,EAAME,QAAQqI,KAAK,UAkBfC,GAdW,SAAC,GAAiB,IAAf/M,EAAc,EAAdA,QACrB/B,EAAUN,KAEhB,OACE,kBAACiG,EAAA,EAAD,CAAY5D,QAASA,EAAS5B,UAAWH,EAAQyO,aAC/C,kBAACM,GAAA,EAAD,QCyESC,GAzFO,SAAC,GAOjB,IALFC,EAKC,EALDA,uBACAC,EAIC,EAJDA,uBACAC,EAGC,EAHDA,eAGC,IAFDC,mBAEC,SA6BGC,EAAa,SAACC,GAClB,OACE,kBAACzN,EAAA,EAAD,CACEE,QAASwN,EAAsBD,GAC/BxN,MAAM,UACN5B,QAAQ,aAHV,mBAUEsP,EAAqB,SAACF,GAC1B,OACE,kBAACG,GAAA,EAAD,CAAS1L,MAAM,+BAA+B2L,OAAK,GACjD,kCACE,kBAAC7N,EAAA,EAAD,CACEE,QAASwN,EAAsBD,GAC/BxN,MAAM,UACN5B,QAAQ,YACRyP,UAAQ,GAJV,iBAaFJ,EAAwB,SAACD,GAAD,OAAe,WAC3CL,IACAK,MAGIM,EAA2B,SAACN,GAAD,OAAe,WAC9CJ,IACAI,MAGF,OACE,kBAAC,KAAD,CAAkBO,KAAMV,MACrB,mBApEa,SAACW,EAAUC,EAAUT,GACrC,OACE,kBAAC3K,EAAA,EAAD,CACEH,KAAMsL,EACNlL,QAASmL,GAET,kBAAClL,EAAA,EAAD,iCACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,gEAIF,kBAACC,EAAA,EAAD,KACGoK,EAAcC,EAAWC,GAAaE,EAAmBF,GAC1D,kBAACzN,EAAA,EAAD,CACEE,QAAS6N,EAAyBN,GAClCxN,MAAM,YACN5B,QAAQ,aAHV,wBAOA,kBAAC,GAAD,CAAmB6B,QAASgO,MA+CQC,CAAvC,EAAGF,SAAH,EAAaC,SAAb,EAAuBT,eCLfW,GAzEI,SAAC,GAQd,IANFzL,EAMC,EANDA,KACAC,EAKC,EALDA,QACAC,EAIC,EAJDA,mBACAwL,EAGC,EAHDA,mBAGC,IAFDd,mBAEC,SA+BH,OACE,kBAACzK,EAAA,EAAD,CACEH,KAAMA,EACNI,QAAS,kBAAMH,GAAQ,KAEvB,kBAACI,EAAA,EAAD,sBACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,oDAIF,kBAACC,EAAA,EAAD,KACGoK,EAvCH,kBAACvN,EAAA,EAAD,CACEE,QAAS2C,EACT5C,MAAM,UACN5B,QAAQ,aAHV,gBAYA,kBAACuP,GAAA,EAAD,CAAS1L,MAAM,+BAA+B2L,OAAK,GACjD,kCACE,kBAAC7N,EAAA,EAAD,CACEE,QAAS2C,EACT5C,MAAM,UACN5B,QAAQ,YACRyP,UAAQ,GAJV,gBA0BF,kBAAC9N,EAAA,EAAD,CACEE,QAASmO,EACTpO,MAAM,YACN5B,QAAQ,aAHV,mBAOA,kBAAC,GAAD,CAAmB6B,QAAS,kBAAM0C,GAAQ,S,SChD5C/E,GAAYC,aAAW,SAAC2G,GAAD,MAAY,CACvC6J,cAAe,CACbpJ,aAAcT,EAAMqI,QAAQ,GAC5B/H,QAAS,OACTC,eAAgB,YAElBuJ,kBAAmB,CACjBvM,YAAa,QAEfwM,eAAgB,CACdlJ,WAAYb,EAAMqI,QAAQ,IAE5B2B,WAAY,CACVzQ,UAAW,GACXkH,aAAc,GAEhBwJ,iBAAkB,CAChB1Q,UAAWyG,EAAMqI,QAAQ,IAE3B6B,iBAAkB,CAChBrJ,WAAY,YAgQDsJ,GA5PF,WAAO,IAAD,EAC2BtL,oBAAS,GADpC,mBACVG,EADU,KACMC,EADN,OAEeJ,oBAAS,GAFxB,mBAEVuL,EAFU,KAEAC,EAFA,KAIX3Q,EAAUN,KACVyB,EAAKyP,cAAYzP,GACjBM,EAAWC,cACXC,EAAUC,cAEVsD,EAAOlC,aAAY,SAACC,GAAD,OAAWA,EAAMlC,MAAMsK,MAAK,SAAAnK,GAAC,OAAIA,EAAEC,KAAOA,QAC7D0P,EAAa7N,aAAY,SAACC,GAAD,OAAWA,EAAMuI,UAC1CsF,EAAaD,EAAWxF,MAAK,SAAAI,GAAC,OAAIA,EAAEC,OAASF,KAAOuF,oBACpDjF,EAAW9I,aAAY,SAACC,GAAD,OAAWA,EAAMC,SAAS4I,YACjDC,EAAa/I,aAAY,SAACC,GAAD,OAAWA,EAAMC,SAAS8I,UACnDjJ,EAAWC,aAAY,SAACC,GAAD,OAAWA,EAAMC,SAASH,YAEjDiO,EAAWhO,aAAY,SAACC,GAAD,OAAWA,EAAM+N,YAE9CC,qBAAU,WAER,OADAxP,EAASyP,eACF,WACLzP,EAAS0P,mBAEV,CAAC1P,IAEJ,IA6GM2P,EAA0B,WAC9B3P,EAAS4P,iBAGLC,EAAkB,WACtB7P,EAAS8P,YAAarM,IACtBzD,EAAS+P,YAAStM,KAGduM,EAAwB,WACxB3F,EACF4F,IAEAC,KAIEA,EAA2B,WAC/BlQ,EAAS8P,YAAarM,IACtBzD,EAASmQ,iBAGLF,EAA0B,WAC1BvC,IACFwB,GAAY,IAEZlP,EAASmQ,gBACTnQ,EAASyP,iBAIPjC,EAAyB,WAC7B0B,GAAY,GACZlP,EAASmQ,gBACTnQ,EAASyP,eACTzP,EAAS+P,YAAStM,KAGdgK,EAAyB,WAC7ByB,GAAY,GACZlP,EAASmQ,gBACTnQ,EAASoQ,YAAoBb,IAC7BvP,EAASyP,gBAGLY,EAAoB,SAAClM,GACE,KAAvBA,EAAMC,OAAOuG,OAAgBxG,EAAMC,OAAOuG,MAAMtD,OAAS,GAC3DrH,EAASoL,aAAYrB,KAAOuF,mBACnBD,GACTrP,EAASqL,aAAYtB,KAAOuF,mBAE9BtP,EAASsQ,YAAU7M,EAAMU,EAAMC,OAAOuG,SAGlC4F,EAAwB,WAC5BvQ,EAASwQ,YAAW/M,KAShBiK,EAAiB,WACrB,OAAQ+C,KAAEC,QAAQnB,KAAckB,KAAEE,QAAQpB,EAAU9L,IAGtD,OAAIA,EAEA,6BA9KE4G,EAEA,yBAAKnI,MAAO,CAAE0O,MAAM,GAAD,OANhB,EAAKnN,EAAKnB,MAAM+E,OAAU,GAMV,QACjB,kBAAC0E,EAAA,EAAD,CACE/J,MAAM,aACNF,SAAUuO,EACVrE,aAAcvI,EAAKnB,MACnB2J,WAAsBC,IAAfmD,EACPlD,WAAYkD,EAAa,iCAAmC,GAC5D5C,WAAS,EACT/N,UAAWH,EAAQsQ,cAMvB,kBAACxQ,EAAA,EAAD,CAASC,KAAMmF,EAAKnB,QAgKpB,6BACE,yBAAK5D,UAAWH,EAAQmQ,eA7IX,WACnB,IAAKrE,EACH,OACE,kBAAC3I,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CACEE,SAAU6N,EACV9N,QAASyI,EACTjK,MAAM,YAGV2B,MAAM,cACNtD,UAAWH,EAAQoQ,oBAkIhBkC,GA7JQ,WACjB,GAAInD,IACF,OACE,kBAACtN,EAAA,EAAD,CACEE,QAASuP,EACTxP,MAAM,UACN5B,QAAS6C,EAAW,YAAc,WAClC4M,SAAgC,IAAtBkB,EAAW/H,QAJvB,gBA2JKuG,GA3HP,kBAAClM,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CACEE,SAAUkO,EACVnO,QAASwI,EACThK,MAAM,YAGV2B,MAAM,YACNtD,UAAWH,EAAQqQ,kBAqHjB,kBAAC,GAAD,CACEnL,KAAMA,KAGV,kBAACqC,EAAA,EAAD,CAAWC,UAAU,GAnHrBsE,EAEA,kBAACjK,EAAA,EAAD,CACEE,QAASiQ,EACT9R,QAAQ,YACR4B,MAAM,UACN2H,UAAW,kBAACC,EAAA,EAAD,MACXvJ,UAAWH,EAAQuQ,kBALrB,eAWI,+BAyGJ,kBAAChJ,EAAA,EAAD,CAAWQ,MAAM,QAAQP,UAAU,GArGnCsE,EAEA,kBAACjK,EAAA,EAAD,CACEE,QAAS,kBAAMwD,GAAkB,IACjCrF,QAAQ,YACR4B,MAAM,YACN2H,UAAW,kBAAC8I,EAAA,EAAD,MACXpS,UAAWH,EAAQwQ,kBALrB,eAWI,+BA2FJ,kBAAC,EAAD,CACEhM,KAAMc,EACNb,QAASc,EACTb,mBAjCyB,WAC/BjD,EAAS4E,YAAWnB,IACpBzD,EAASyP,eACTvP,EAAQQ,KAAK,cAgCT,kBAAC,GAAD,CACEqC,KAAMkM,EACNjM,QAASkM,EACTjM,mBAAoBuK,EACpBiB,mBAAoBhB,EACpBE,YAAmC,IAAtByB,EAAW/H,SAE1B,kBAAC,GAAD,CACEmG,uBAAwBA,EACxBC,uBAAwBA,EACxBC,eAAgBA,EAChBC,YAAmC,IAAtByB,EAAW/H,UAM5B,6BACE,kBAAChJ,EAAA,EAAD,CAASC,KAAK,iBACd,mECrRFL,GAAYC,aAAW,iBAAO,CAClC6S,cAAe,CACb3L,eAAgB,SAChB4L,WAAY,SACZnQ,QAAS,QAoCEoQ,UAhCU,WACvB,IAAM1S,EAAUN,KACV+B,EAAWC,cAEX8D,EAAOxC,aAAY,SAACC,GAAD,OAAWA,EAAMwC,KAAKD,QAM/C,OAJAyL,qBAAU,WACRxP,EAASkR,YAAgBnN,MACxB,CAAC/D,EAAU+D,IAGZ,oCACE,kBAAC,gBAAD,KACE,kBAACtB,EAAA,EAAD,CAAQ1C,UAAQ,IAChB,kBAAC+F,EAAA,EAAD,CAAWC,UAAU,EAAOrH,UAAWH,EAAQwS,eAC7C,kBAACjL,EAAA,EAAD,CAAWC,SAAU,KAAMO,MAAM,UAC/B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOvF,KAAK,cACV,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,WACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KAAI","file":"static/js/5.0fab7049.chunk.js","sourcesContent":["import React from 'react'\nimport { makeStyles, Typography } from '@material-ui/core'\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles(() => ({\n  header: {\n    marginTop: 30\n  }\n}))\n\nconst Heading = ({ text }) => {\n  const classes = useStyles()\n  return (\n    <Typography component='h1' variant='h4' className={classes.header}>\n      {text}\n    </Typography>\n  )\n}\n\nHeading.propTypes = {\n  text: PropTypes.string.isRequired\n}\n\nexport default Heading","import axios from 'axios'\nimport { getAuthHeader } from '../helpers/auth'\nconst url = '/api/users'\n\nconst getAuthConfig = () => {\n  return { headers: getAuthHeader() }\n}\n\nconst create = async (username, password) => {\n  const res = await axios.post(url, { username, password })\n  return res.data\n}\n\nconst usernameAvailable = async (username) => {\n  const res = await axios.post(url + '/username-available', { username })\n  return res.data\n}\n\nconst editSongs = async (username, songs) => {\n  const songIds = songs.map(s => s.id)\n  const res = await axios.put(url + '/songs', { username, songIds } , getAuthConfig())\n  return res.data\n}\n\nexport default { create, usernameAvailable, editSongs }","import React from 'react'\nimport { Button } from '@material-ui/core'\nimport { useDispatch } from 'react-redux'\nimport { logout } from '../../redux/authReducer'\nimport { useHistory } from 'react-router'\nimport PropTypes from 'prop-types'\nimport { showAlert, alerts } from '../../redux/alertReducer'\n\nconst LogButton = ({ loggedIn }) => {\n\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  const handleLogClick = () => {\n    if (loggedIn) {\n      dispatch(logout())\n      dispatch(showAlert(alerts.logout))\n    }\n    history.push('/')\n  }\n\n  return (\n    <Button\n      color='inherit'\n      onClick={handleLogClick}\n    >\n      {loggedIn ? 'Log out' : 'Log in'}\n    </Button>\n  )\n}\n\nLogButton.propTypes = {\n  loggedIn: PropTypes.bool\n}\n\nexport default LogButton","import React from 'react'\nimport { Button, makeStyles } from '@material-ui/core'\nimport { Link } from 'react-router-dom'\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles(() => ({\n  navButton: {\n    textDecoration: 'none',\n    color: 'white',\n    padding: 20\n  }\n}))\n\nconst NavButton = ({ path, text, onClick }) => {\n  const classes = useStyles()\n\n  return (\n    <Button\n      component={Link}\n      to={path}\n      onClick={onClick}\n      color='inherit'\n      className={classes.navButton}\n    >\n      {text}\n    </Button>\n  )\n}\n\nNavButton.propTypes = {\n  path: PropTypes.string,\n  text: PropTypes.string.isRequired,\n  onClick: PropTypes.func\n}\n\nexport default NavButton","import React from 'react'\nimport NavButton from './NavButton'\nimport { makeStyles } from '@material-ui/core'\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    flex: 1\n  }\n}))\n\nconst NavButtonsDiv = ({ loggedIn }) => {\n  const classes = useStyles()\n\n  const loggedInButtons = () => {\n    return <NavButton path='/songs/' text='Your songs' />\n  }\n\n  const loggedOutButtons = () => {\n    return <span/>\n  }\n\n  return (\n    <div className={classes.root}>\n      {loggedIn ? loggedInButtons() : loggedOutButtons()}\n    </div>\n  )\n}\n\nNavButtonsDiv.propTypes = {\n  loggedIn: PropTypes.bool\n}\n\nexport default NavButtonsDiv","import React from 'react'\nimport { Switch, FormControlLabel } from '@material-ui/core'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { toggleDarkMode } from '../redux/statusReducer'\n\nconst DarkModeSwitch = () => {\n  const dispatch = useDispatch()\n  const darkMode = useSelector((state) => state.statuses.darkMode)\n\n  return (\n    <FormControlLabel\n      control={\n        <Switch checked={darkMode}\n          onChange={() => dispatch(toggleDarkMode())}\n          color='secondary'\n        />\n      }\n      label='Dark mode'\n      labelPlacement='top'\n      style={{ margin: 6, marginRight: 30 }}\n    />\n  )\n}\n\nexport default DarkModeSwitch","import React from 'react'\nimport { AppBar, Toolbar, Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport LogoutButton from './LogButton'\nimport NavButtonsDiv from './NavButtonsDiv'\nimport PropTypes from 'prop-types'\nimport DarkModeSwitch from '../DarkModeSwitch'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    flexGrow: 1\n  },\n  title: {\n    fontSize: 20,\n    paddingRight: 15\n  }\n}))\n\nconst NavBar = ({ loggedIn }) => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <AppBar position='static'>\n        <Toolbar>\n          <Typography className={classes.title}>\n            SongWriter\n          </Typography>\n          <NavButtonsDiv loggedIn={loggedIn} />\n          <DarkModeSwitch />\n          <LogoutButton loggedIn={loggedIn} />\n        </Toolbar>\n      </AppBar>\n    </div>\n\n  )\n}\n\nNavBar.propTypes = {\n  loggedIn: PropTypes.bool\n}\n\nexport default NavBar","import React from 'react'\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core'\nimport PropTypes from 'prop-types'\n\nconst DeleteDialog = ({ open, setOpen, handleConfirmClick }) => {\n  return (\n    <Dialog\n      open={open}\n      onClose={() => setOpen(false)}\n    >\n      <DialogTitle>Delete this song?</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          Once deleted, this song cannot be restored.\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={handleConfirmClick}\n          color='secondary'\n          variant='contained'\n        >\n          Delete permanently\n        </Button>\n        <Button onClick={() => setOpen(false)} variant='contained'>\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nDeleteDialog.propTypes = {\n  open: PropTypes.bool.isRequired,\n  setOpen: PropTypes.func.isRequired,\n  handleConfirmClick: PropTypes.func.isRequired\n}\n\nexport default DeleteDialog","import React, { useState } from 'react'\nimport { IconButton, Menu, MenuItem, Button } from '@material-ui/core'\nimport { MoreVert } from '@material-ui/icons'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { deleteSong, cloneSong } from '../../redux/songReducer'\nimport DeleteDialog from '../songs/dialogs/DeleteDialog'\nimport PropTypes from 'prop-types'\n\nconst SongMenu = ({ song }) => {\n  const [anchorTo, setAnchorTo] = useState(null)\n  const [delConfirmOpen, setDelConfirmOpen] = useState(false)\n\n  const dispatch = useDispatch()\n  const user = useSelector((state) => state.auth.user)\n  const darkMode = useSelector((state) => state.statuses.darkMode)\n\n  const handleClick = (event) => {\n    setAnchorTo(event.target)\n  }\n\n  const handleClose = () => {\n    setAnchorTo(null)\n  }\n\n  const handleCloneClick = () => {\n    dispatch(cloneSong(song, user.username))\n    handleClose()\n  }\n\n  const handleDeleteClick = () => {\n    setDelConfirmOpen(true)\n    handleClose()\n  }\n\n  const handleDeleteConfirmClick = () => {\n    dispatch(deleteSong(song))\n  }\n\n  return (\n    <>\n      <IconButton\n        onClick={handleClick}\n      >\n        <MoreVert />\n      </IconButton>\n      <Menu\n        onClose={handleClose}\n        open={anchorTo !== null}\n        anchorEl={anchorTo}\n        elevation={1}\n        keepMounted\n      >\n        <MenuItem>\n          <Button\n            onClick={handleCloneClick}\n            variant={darkMode ? 'contained' : 'outlined'}\n            color='primary'\n          >\n            Clone\n          </Button>\n        </MenuItem>\n        <MenuItem>\n          <Button\n            onClick={handleDeleteClick}\n            variant={darkMode ? 'contained' : 'outlined'}\n            color='secondary'\n          >\n            Delete\n          </Button>\n        </MenuItem>\n      </Menu>\n      <DeleteDialog\n        open={delConfirmOpen}\n        setOpen={setDelConfirmOpen}\n        handleConfirmClick={handleDeleteConfirmClick}\n      />\n    </>\n  )\n}\n\nSongMenu.propTypes = {\n  song: PropTypes.object.isRequired\n}\n\nexport default SongMenu","import React from 'react'\nimport { ListItem, makeStyles, Typography, Container, Box, Icon } from '@material-ui/core'\nimport { Link } from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport SongMenu from './SongMenu'\nimport { SortableHandle } from 'react-sortable-hoc'\nimport { DragIndicator } from '@material-ui/icons'\n\nconst useStyles = makeStyles((theme) => ({\n  item: {\n    color: theme.palette.primary.main\n  },\n  container: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  title: {\n    textAlign: 'left',\n    marginTop: 8,\n    marginBottom: 8\n  }\n}))\n\nconst DragHandle = SortableHandle(() => (\n  <Box style={{ marginTop: 18, marginLeft: -12 }}>\n    <Icon>\n      <DragIndicator />\n    </Icon>\n  </Box>\n))\n\nconst SongListItem = ({ song }) => {\n  const classes = useStyles()\n\n  return (\n    <Container maxWidth='xl' className={classes.container}>\n      <DragHandle />\n      <ListItem\n        component={Link}\n        to={`/songs/${song.id}`}\n        divider={true}\n        className={classes.item}\n      >\n        <Typography variant='h6' className={classes.title}>\n          {song.title}\n        </Typography>\n      </ListItem>\n      <SongMenu song={song} />\n    </Container>\n  )\n}\n\nSongListItem.propTypes = {\n  song: PropTypes.object.isRequired\n}\n\nexport default SongListItem","import React from 'react'\nimport { SortableContainer, SortableElement } from 'react-sortable-hoc'\nimport { Container } from '@material-ui/core'\nimport SongListItem from './SongListItem'\n\nconst SortableSong = SortableElement(({ song }) => {\n  return (\n    <SongListItem song={song} />\n  )\n})\n\nconst SortableSongList = SortableContainer(({ songs }) => {\n  return (\n    <Container maxWidth={false} align='left'>\n      {songs.map((song, index) => {\n        return (\n          <SortableSong\n            key={song.id}\n            index={index}\n            song={song}\n          />\n        )\n      })}\n    </Container>\n  )\n})\n\nexport default SortableSongList","import React from 'react'\nimport { List, makeStyles, Button } from '@material-ui/core'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Add } from '@material-ui/icons'\nimport songHelper from '../../helpers/songHelper'\nimport { createSong, sortSongs } from '../../redux/songReducer'\nimport { useHistory } from 'react-router'\nimport Heading from '../Heading'\nimport SortableSongList from './SortableSongList'\nimport arrayMove from 'array-move'\nimport userService from '../../services/userService'\nimport { showAlert, alerts } from '../../redux/alertReducer'\n\nconst useStyles = makeStyles(() => ({\n  list: {\n    marginTop: 10\n  },\n  addSongButton: {\n    margin: 8\n  }\n}))\n\nconst SongList = () => {\n  const classes = useStyles()\n  const songs = useSelector((state) => state.songs)\n  const user = useSelector((state) => state.auth.user)\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  const handleNewSongClick = () => {\n    dispatch(createSong(songHelper.getDefaultSong(user))) // Note: not error handling createSong\n      .then(res => {\n        history.push('/songs/' + res.id)\n      })\n      .catch(() => console.log('Error creating song'))\n  }\n\n  const handleSortEnd = async ({ oldIndex, newIndex }) => {\n    const sortedSongs = arrayMove(songs, oldIndex, newIndex)\n    dispatch(sortSongs(sortedSongs))  // Seperated from the backend call so sorting looks smoother for user\n    try {\n      await userService.editSongs(user.username, sortedSongs)\n    } catch (error) {\n      dispatch(showAlert(alerts.dataDesync))\n    }\n  }\n\n  const songList = () => {\n    return (\n      <SortableSongList\n        songs={songs}\n        onSortEnd={handleSortEnd}\n        useWindowAsScrollContainer\n        useDragHandle\n      />\n    )\n  }\n\n  return (\n    <div>\n      <Heading text='Your songs' />\n\n      <List className={classes.list}>\n        {songs.length !== 0 ? songList() : <p>No songs found</p>}\n      </List>\n      <Button\n        onClick={handleNewSongClick}\n        variant='contained'\n        color='primary'\n        startIcon={<Add />}\n        className={classes.addSongButton}\n      >\n        New song\n      </Button>\n    </div>\n  )\n}\n\nexport default SongList","import React, { useState } from 'react'\nimport { makeStyles, TextField, Button, Icon, Box, Typography } from '@material-ui/core'\nimport PropTypes from 'prop-types'\nimport songHelper from '../../../helpers/songHelper'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { editSection, deleteSection, cloneSection } from '../../../redux/songReducer'\nimport { errors, createError, removeError } from '../../../redux/errorReducer'\nimport { SortableHandle } from 'react-sortable-hoc'\nimport { DragIndicator } from '@material-ui/icons'\n\nconst useStyles = makeStyles((theme) => ({\n  section: {\n    borderWidth: 2,\n    borderStyle: 'solid',\n    borderRadius: 5,\n    borderColor: theme.palette.primary.main,\n    padding: 20,\n    marginBottom: 3,\n    overflow: 'auto',\n    whiteSpace: 'nowrap',\n    backgroundColor: theme.palette.background.paper\n  },\n  normalViewRoot: {\n    marginTop: -12,\n    marginBottom: -15\n  },\n  name: {\n    marginTop: 10\n  },\n  linesDiv: {\n    marginTop: 12,\n    marginBottom: 10\n  },\n  line: {\n    marginBottom: 5\n  },\n  editForm: {\n    marginBottom: 15\n  },\n  nameField: {\n    marginBottom: 10\n  },\n  bottomDiv: {\n    display: 'flex'\n  },\n  lineSubmitButton: {\n    marginTop: 10,\n    marginBottom: -25\n  },\n  cloneButton: {\n    marginTop: 10,\n    marginBottom: -25,\n  },\n  deleteButton: {\n    marginTop: 10,\n    marginBottom: -25,\n    marginLeft: 'auto'\n  },\n  dragHandle: {\n    marginLeft: 'auto',\n    marginTop: 10,\n    marginBottom: -25,\n  }\n}))\n\nconst SongSection = ({ songId, sectionId }) => {\n  const [deleteConfirm, setDeleteConfirm] = useState(false)\n\n  const classes = useStyles()\n  const dispatch = useDispatch()\n\n  const DragHandle = SortableHandle(() => (\n    <Box\n      className={classes.dragHandle}>\n      <Icon>\n        <DragIndicator />\n      </Icon>\n    </Box>\n  ))\n\n  const section = useSelector((state) => state.songs.find(s => s.id === songId).sections.find(s => s.id === sectionId))\n  const nameError = useSelector((state) => state.errors.find(e => e.type === errors.SECTION_NAME_ERROR && e.id === sectionId))\n  const lineError = useSelector((state) => state.errors.find(e => e.type === errors.SECTION_LINES_ERROR && e.id === sectionId))\n  const editMode = useSelector((state) => state.statuses.editMode)\n  const showChords = useSelector((state) => state.statuses.chords)\n  const darkMode = useSelector((state) => state.statuses.darkMode)\n\n  // If tab is pressed, put 4 spaces into the string\n  const linesOnKeyDown = (event) => {\n    if (event.key === 'Tab' && !event.shiftKey) {\n      event.preventDefault()\n      const value = event.target.value\n      const selectionStart = event.target.selectionStart\n      const selectionEnd = event.target.selectionEnd\n      event.target.value = value.substring(0, selectionStart) + '    ' + value.substring(selectionEnd)\n      event.target.selectionStart = selectionEnd + 4 - (selectionEnd - selectionStart)\n      event.target.selectionEnd = selectionEnd + 4 - (selectionEnd - selectionStart)\n    }\n  }\n\n  const editView = () => {\n    return (\n      <form className={classes.editForm} >\n        <TextField\n          label='Edit name'\n          name='name'\n          onChange={handleNameChange}\n          defaultValue={section.name}\n          error={nameError !== undefined}\n          helperText={nameError ? 'Length must be 1-50 characters' : ''}\n          className={classes.nameField}\n        />\n        <div>\n          <TextField\n            multiline\n            label='Lines'\n            name='lines'\n            onChange={handleLinesChange}\n            onKeyDown={linesOnKeyDown}\n            defaultValue={songHelper.linesArrayToString(section.lines)}\n            rows={section.lines.size}\n            error={lineError !== undefined}\n            fullWidth={true}\n            helperText={lineError ? 'Max 200 characters for one line' : ''}\n          />\n        </div>\n        <div className={classes.bottomDiv}>\n          <Button\n            onClick={handleCloneClick}\n            size='small'\n            color='primary'\n            variant={darkMode ? 'contained' : 'outlined'}\n            className={classes.cloneButton}\n          >\n            Clone\n          </Button>\n          <DragHandle />\n          <Button\n            onClick={handleDeleteClick}\n            size='small'\n            color='secondary'\n            variant={darkMode ? 'contained' : 'outlined'}\n            className={classes.deleteButton}\n          >\n            {deleteConfirm ? 'Confirm deletion' : 'Delete'}\n          </Button>\n        </div>\n      </form>\n    )\n  }\n\n  const normalView = () => {\n    return (\n      <div className={classes.normalViewRoot}>\n        <Typography variant='h6' className={classes.name}>\n          {section.name}\n        </Typography>\n        <div className={classes.linesDiv}>\n          {section.lines.map((line, index) => {\n            return (\n              <div key={index}>\n                <Typography variant='body1' className={classes.line}>\n                  {showChords ? songHelper.addChordsToLine(line) : lineWithSpaces(line)}\n                </Typography>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n\n  const lineWithSpaces = (line) => {\n    return line.replace(/ /g, '\\u00a0')\n  }\n\n  const handleNameChange = (event) => {\n    const name = event.target.value\n    const editedSection = { ...section, lines: [...section.lines], name }\n    if (name.length === 0 || name.length > 50) {\n      dispatch(createError(errors.SECTION_NAME_ERROR, sectionId))\n    } else {\n      dispatch(removeError(errors.SECTION_NAME_ERROR, sectionId))\n    }\n    dispatch(editSection(songId, editedSection))\n  }\n\n  const handleLinesChange = (event) => {\n    const linesArray = songHelper.linesStringToArray(event.target.value)\n    const editedSection = { ...section, lines: linesArray }\n    if (!songHelper.validateLines(linesArray)) {\n      dispatch(createError(errors.SECTION_LINES_ERROR, sectionId))\n    } else {\n      dispatch(removeError(errors.SECTION_LINES_ERROR, sectionId))\n    }\n    dispatch(editSection(songId, editedSection))\n  }\n\n  const handleCloneClick = () => {\n    console.log('Cloning', section)\n    dispatch(cloneSection(songId, section))\n  }\n\n  const handleDeleteClick = (event) => {\n    event.preventDefault()\n    if (deleteConfirm) {\n      dispatch(deleteSection(songId, section))\n    } else {\n      setDeleteConfirm(true)\n    }\n  }\n\n  return (\n    <div className={classes.section}>\n      {editMode ? editView() : normalView()}\n    </div>\n  )\n}\n\nSongSection.propTypes = {\n  songId: PropTypes.string.isRequired,\n  sectionId: PropTypes.number.isRequired\n}\n\nexport default SongSection","import React from 'react'\nimport { SortableContainer, SortableElement } from 'react-sortable-hoc'\nimport { Container } from '@material-ui/core'\nimport SongSection from './SongSection'\n\nconst SortableSection = SortableElement(({ section, song }) => {\n  return (\n    <SongSection\n      songId={song.id}\n      sectionId={section.id}\n    >\n    </SongSection>\n  )\n})\n\nconst SortableSectionList = SortableContainer(({ song }) => {\n  return (\n    <Container maxWidth={false} align='left'>\n      {song.sections.map((section, index) => {\n        return (\n          <SortableSection\n            key={section.id}\n            index={index}\n            section={section}\n            song={song}\n          />\n        )\n      })}\n    </Container>\n  )\n})\n\nexport default SortableSectionList","import React from 'react'\nimport { Container } from '@material-ui/core'\nimport arrayMove from 'array-move'\nimport { useDispatch } from 'react-redux'\nimport { sortSections } from '../../../redux/songReducer'\nimport SortableSectionList from './SortableSectionList'\n\n\nconst SongSectionList = ({ song }) => {\n\n  const dispatch = useDispatch()\n\n  const handleSortEnd = ({ oldIndex, newIndex }) => {\n    const sortedSections = arrayMove(song.sections, oldIndex, newIndex)\n    dispatch(sortSections(song, sortedSections))\n  }\n\n  const renderSections = () => {\n    if (song.sections.length === 0) {\n      return (\n        <Container>\n          <h2>No sections</h2>\n        </Container>\n      )\n    }\n    return (\n      <SortableSectionList\n        song={song}\n        onSortEnd={handleSortEnd}\n        useDragHandle\n        useWindowAsScrollContainer\n      />\n    )\n  }\n\n  return (\n    renderSections()\n  )\n}\n\nexport default SongSectionList","import React from 'react'\nimport { makeStyles, IconButton } from '@material-ui/core'\nimport { Close } from '@material-ui/icons'\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  }\n}))\n\nconst DialogCloseButton = ({ onClick }) => {\n  const classes = useStyles()\n\n  return (\n    <IconButton onClick={onClick} className={classes.closeButton}>\n      <Close />\n    </IconButton>\n  )\n}\n\nDialogCloseButton.propTypes = {\n  onClick: PropTypes.func.isRequired\n}\n\nexport default DialogCloseButton","import React from 'react'\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button, Tooltip } from '@material-ui/core'\nimport NavigationPrompt from 'react-router-navigation-prompt'\nimport PropTypes from 'prop-types'\nimport DialogCloseButton from './DialogCloseButton'\n\nconst UnsavedPrompt = (\n  {\n    handleSaveConfirmClick,\n    handleSaveDiscardClick,\n    unsavedChanges,\n    saveAllowed = true\n  }\n) => {\n\n  const navPrompt = (isActive, onCancel, onConfirm) => {\n    return (\n      <Dialog\n        open={isActive}\n        onClose={onCancel}\n      >\n        <DialogTitle>You have unsaved changes</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            If you leave without saving, all changes will be lost!\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          {saveAllowed ? saveButton(onConfirm) : disabledSaveButton(onConfirm)}\n          <Button\n            onClick={handlePromptDiscardClick(onConfirm)}\n            color='secondary'\n            variant='contained'\n          >\n            Leave without saving\n          </Button>\n          <DialogCloseButton onClick={onCancel} />\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  const saveButton = (onConfirm) => {\n    return (\n      <Button\n        onClick={handlePromptSaveClick(onConfirm)}\n        color='primary'\n        variant='contained'\n      >\n        Save and leave\n      </Button>\n    )\n  }\n\n  const disabledSaveButton = (onConfirm) => {\n    return (\n      <Tooltip title='Resolve errors before saving' arrow>\n        <span> {/* !! Extra wrapper required for Safari !! */}\n          <Button\n            onClick={handlePromptSaveClick(onConfirm)}\n            color='primary'\n            variant='contained'\n            disabled\n          >\n            Can&apos;t save\n          </Button>\n        </span>\n      </Tooltip>\n    )\n  }\n\n  const handlePromptSaveClick = (onConfirm) => () => {\n    handleSaveConfirmClick()\n    onConfirm()\n  }\n\n  const handlePromptDiscardClick = (onConfirm) => () => {\n    handleSaveDiscardClick()\n    onConfirm()\n  }\n\n  return (\n    <NavigationPrompt when={unsavedChanges()}>\n      {({ isActive, onCancel, onConfirm }) => navPrompt(isActive, onCancel, onConfirm) }\n    </NavigationPrompt>\n  )\n}\n\nUnsavedPrompt.propTypes = {\n  handleSaveConfirmClick: PropTypes.func.isRequired,\n  handleSaveDiscardClick: PropTypes.func.isRequired,\n  unsavedChanges: PropTypes.func.isRequired,\n  saveAllowed: PropTypes.bool\n}\n\nexport default UnsavedPrompt","import React from 'react'\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button, Tooltip } from '@material-ui/core'\nimport DialogCloseButton from './DialogCloseButton'\nimport PropTypes from 'prop-types'\n\nconst SaveDialog = (\n  {\n    open,\n    setOpen,\n    handleConfirmClick,\n    handleDiscardClick,\n    saveAllowed = true\n  }\n) => {\n\n  const saveButton = () => {\n    return (\n      <Button\n        onClick={handleConfirmClick}\n        color='primary'\n        variant='contained'\n      >\n        Save changes\n      </Button>\n    )\n  }\n\n  const disabledSaveButton = () => {\n    return (\n      <Tooltip title='Resolve errors before saving' arrow>\n        <span> {/* !! Extra wrapper required for Safari !! */}\n          <Button\n            onClick={handleConfirmClick}\n            color='primary'\n            variant='contained'\n            disabled\n          >\n          Can&apos;t save\n          </Button>\n        </span>\n      </Tooltip>\n    )\n  }\n\n  return (\n    <Dialog\n      open={open}\n      onClose={() => setOpen(false)}\n    >\n      <DialogTitle>Save changes?</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          Save or discard the changes you have made.\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        {saveAllowed ? saveButton() : disabledSaveButton()}\n        <Button\n          onClick={handleDiscardClick}\n          color='secondary'\n          variant='contained'\n        >\n          Discard changes\n        </Button>\n        <DialogCloseButton onClick={() => setOpen(false)} />\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nSaveDialog.propTypes = {\n  open: PropTypes.bool.isRequired,\n  setOpen: PropTypes.func.isRequired,\n  handleConfirmClick: PropTypes.func.isRequired,\n  handleDiscardClick: PropTypes.func.isRequired,\n  saveAllowed: PropTypes.bool\n}\n\nexport default SaveDialog","import React, { useState, useEffect } from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport { makeStyles, Container, Button, TextField, FormControlLabel, Switch } from '@material-ui/core'\nimport { Add, DeleteForever } from '@material-ui/icons'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { editTitle, addSection, deleteSong, saveSong, getSongFromSnapshot } from '../../redux/songReducer'\nimport { saveSnapshot, resetSnapshot } from '../../redux/snapshotReducer'\nimport SongSectionList from './sections/SongSectionList'\nimport _ from 'lodash'\nimport UnsavedPrompt from './dialogs/UnsavedPrompt'\nimport DeleteDialog from './dialogs/DeleteDialog'\nimport SaveDialog from './dialogs/SaveDialog'\nimport Heading from '../Heading'\nimport { errors, createError, removeError } from '../../redux/errorReducer'\nimport { toggleChords, toggleEditMode, resetSongStatuses } from '../../redux/statusReducer'\n\nconst useStyles = makeStyles((theme) => ({\n  menuContainer: {\n    marginBottom: theme.spacing(1),\n    display: 'flex',\n    justifyContent: 'flex-end'\n  },\n  chordToggleSwitch: {\n    marginRight: 'auto'\n  },\n  editModeSwitch: {\n    marginLeft: theme.spacing(1)\n  },\n  titleField: {\n    marginTop: 20,\n    marginBottom: 4\n  },\n  addSectionButton: {\n    marginTop: theme.spacing(1)\n  },\n  deleteSongButton: {\n    marginLeft: 'auto'\n  }\n}))\n\nconst Song = () => {\n  const [delConfirmOpen, setDelConfirmOpen] = useState(false)\n  const [saveOpen, setSaveOpen] = useState(false)\n\n  const classes = useStyles()\n  const id = useParams().id\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  const song = useSelector((state) => state.songs.find(s => s.id === id))\n  const songErrors = useSelector((state) => state.errors)\n  const titleError = songErrors.find(e => e.type === errors.SONG_TITLE_ERROR)\n  const editMode = useSelector((state) => state.statuses.editMode)\n  const showChords = useSelector((state) => state.statuses.chords)\n  const darkMode = useSelector((state) => state.statuses.darkMode)\n\n  const snapshot = useSelector((state) => state.snapshot)\n\n  useEffect(() => {\n    dispatch(resetSnapshot())\n    return () => {\n      dispatch(resetSongStatuses())\n    }\n  }, [dispatch])\n\n  const calculateTitleWidth = () => {\n    return 8 * (song.title.length) + 25\n  }\n\n  const title = () => {\n    if (editMode) {\n      return (\n        <div style={{ width: `${calculateTitleWidth()}px` }}>\n          <TextField\n            label='Edit title'\n            onChange={handleTitleChange}\n            defaultValue={song.title}\n            error={titleError !== undefined}\n            helperText={titleError ? 'Length must be 1-50 characters' : ''}\n            fullWidth\n            className={classes.titleField}\n          />\n        </div>\n      )\n    } else {\n      return (\n        <Heading text={song.title}/>\n      )\n    }\n  }\n\n  const saveButton = () => {\n    if (unsavedChanges()) {\n      return (\n        <Button\n          onClick={handleSaveClick}\n          color='primary'\n          variant={darkMode ? 'contained' : 'outlined'}\n          disabled={songErrors.length !== 0}\n        >\n          Save changes\n        </Button>\n      )\n    }\n  }\n\n  const chordsSwitch = () => {\n    if (!editMode) {\n      return (\n        <FormControlLabel\n          control={\n            <Switch\n              onChange={handleChordsSwitchClick}\n              checked={showChords}\n              color='primary'\n            />\n          }\n          label='Show chords'\n          className={classes.chordToggleSwitch}\n        />\n      )\n    }\n  }\n\n  const editModeSwitch = () => {\n    return (\n      <FormControlLabel\n        control={\n          <Switch\n            onChange={handleEditSwitchClick}\n            checked={editMode}\n            color='primary'\n          />\n        }\n        label='Edit mode'\n        className={classes.editModeSwitch}\n      />\n    )\n  }\n\n  const addSectionButton = () => {\n    if (editMode) {\n      return (\n        <Button\n          onClick={handleAddSectionClick}\n          variant='contained'\n          color='primary'\n          startIcon={<Add />}\n          className={classes.addSectionButton}\n        >\n          New section\n        </Button>\n      )\n    }\n    return (<div/>)\n  }\n\n  const deleteSongButton = () => {\n    if (editMode) {\n      return (\n        <Button\n          onClick={() => setDelConfirmOpen(true)}\n          variant='contained'\n          color='secondary'\n          startIcon={<DeleteForever />}\n          className={classes.deleteSongButton}\n        >\n          Delete song\n        </Button>\n      )\n    }\n    return (<div/>)\n  }\n\n  const handleChordsSwitchClick = () => {\n    dispatch(toggleChords())\n  }\n\n  const handleSaveClick = () => {\n    dispatch(saveSnapshot(song))\n    dispatch(saveSong(song))\n  }\n\n  const handleEditSwitchClick = () => {\n    if (editMode) {\n      handleEditModeExitClick()\n    } else {\n      handleEditModeEnterClick()\n    }\n  }\n\n  const handleEditModeEnterClick = () => {\n    dispatch(saveSnapshot(song))\n    dispatch(toggleEditMode())\n  }\n\n  const handleEditModeExitClick = () => {\n    if (unsavedChanges()) {\n      setSaveOpen(true)\n    } else {\n      dispatch(toggleEditMode())\n      dispatch(resetSnapshot())\n    }\n  }\n\n  const handleSaveConfirmClick = () => {\n    setSaveOpen(false)\n    dispatch(toggleEditMode())\n    dispatch(resetSnapshot())\n    dispatch(saveSong(song))\n  }\n\n  const handleSaveDiscardClick = () => {\n    setSaveOpen(false)\n    dispatch(toggleEditMode())\n    dispatch(getSongFromSnapshot(snapshot))\n    dispatch(resetSnapshot())\n  }\n\n  const handleTitleChange = (event) => {\n    if (event.target.value === '' || event.target.value.length > 50) {\n      dispatch(createError(errors.SONG_TITLE_ERROR))\n    } else if (titleError) {\n      dispatch(removeError(errors.SONG_TITLE_ERROR))\n    }\n    dispatch(editTitle(song, event.target.value))\n  }\n\n  const handleAddSectionClick = () => {\n    dispatch(addSection(song))\n  }\n\n  const handleDeleteConfirmClick = () => {\n    dispatch(deleteSong(song))\n    dispatch(resetSnapshot())\n    history.push('/songs/')\n  }\n\n  const unsavedChanges = () => {\n    return !_.isEmpty(snapshot) && !_.isEqual(snapshot, song)\n  }\n\n  if (song) {\n    return (\n      <div>\n        {title()}\n        <div>\n          <div className={classes.menuContainer}>\n            {chordsSwitch()}\n            {saveButton()}\n            {editModeSwitch()}\n          </div>\n          <SongSectionList\n            song={song}\n          />\n        </div>\n        <Container maxWidth={false}>\n          {addSectionButton()}\n        </Container>\n        <Container align='right' maxWidth={false}>\n          {deleteSongButton()}\n        </Container>\n        <DeleteDialog\n          open={delConfirmOpen}\n          setOpen={setDelConfirmOpen}\n          handleConfirmClick={handleDeleteConfirmClick}\n        />\n        <SaveDialog\n          open={saveOpen}\n          setOpen={setSaveOpen}\n          handleConfirmClick={handleSaveConfirmClick}\n          handleDiscardClick={handleSaveDiscardClick}\n          saveAllowed={songErrors.length === 0}\n        />\n        <UnsavedPrompt\n          handleSaveConfirmClick={handleSaveConfirmClick}\n          handleSaveDiscardClick={handleSaveDiscardClick}\n          unsavedChanges={unsavedChanges}\n          saveAllowed={songErrors.length === 0}\n        />\n      </div>\n    )\n  } else {\n    return (\n      <div>\n        <Heading text='Loading song' />\n        <p>Check the url if it takes too long</p>\n      </div>\n    )\n  }\n}\n\nexport default Song","import React, { useEffect } from 'react'\nimport NavBar from '../nav/NavBar'\nimport { makeStyles, Container } from '@material-ui/core'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport SongList from '../songlist/SongList'\nimport Song from '../songs/Song'\nimport { initializeSongs } from '../../redux/songReducer'\nimport { useDispatch, useSelector } from 'react-redux'\n\nconst useStyles = makeStyles(() => ({\n  mainContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20\n  }\n}))\n\nconst AuthenticatedApp = () => {\n  const classes = useStyles()\n  const dispatch = useDispatch()\n\n  const user = useSelector((state) => state.auth.user)\n\n  useEffect(() => {\n    dispatch(initializeSongs(user))\n  }, [dispatch, user])\n\n  return (\n    <>\n      <Router>\n        <NavBar loggedIn />\n        <Container maxWidth={false} className={classes.mainContainer}>\n          <Container maxWidth={'lg'} align='center'>\n            <Switch>\n              <Route path='/songs/:id'>\n                <Song />\n              </Route>\n              <Route path='/songs/'>\n                <SongList />\n              </Route>\n              <Route path='/'><p>Welcome</p></Route>\n            </Switch>\n          </Container>\n        </Container>\n      </Router>\n    </>\n  )\n}\n\nexport default AuthenticatedApp\n"],"sourceRoot":""}