{"version":3,"sources":["components/Heading.js","components/nav/LogButton.js","components/nav/NavButton.js","components/nav/NavButtonsDiv.js","components/nav/NavBar.js","components/songs/DeleteDialog.js","components/songs/SongMenu.js","components/songs/SongListItem.js","components/songs/SongList.js","components/songs/SongSection.js","components/songs/SongSectionList.js","components/DialogCloseButton.js","components/songs/UnsavedPrompt.js","components/songs/SaveDialog.js","components/songs/Song.js","components/app/AuthenticatedApp.js"],"names":["useStyles","makeStyles","header","marginTop","Heading","text","classes","component","variant","className","LogButton","loggedIn","dispatch","useDispatch","history","useHistory","Button","color","onClick","logout","showAlert","alerts","push","navButton","textDecoration","padding","NavButton","path","Link","to","root","flex","NavButtonsDiv","loggedOutButtons","flexGrow","title","fontSize","paddingRight","NavBar","AppBar","position","Toolbar","Typography","DeleteDialog","open","setOpen","handleConfirmClick","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","menu","SongMenu","song","useState","anchorTo","setAnchorTo","delConfirmOpen","setDelConfirmOpen","user","useSelector","state","auth","handleClose","IconButton","event","target","MoreVert","Menu","elevation","anchorEl","keepMounted","MenuItem","cloneSong","username","deleteSong","item","container","display","justifyContent","textAlign","marginBottom","SongListItem","Container","maxWidth","ListItem","id","divider","list","addSongButton","margin","SongList","songs","console","log","length","List","map","key","startIcon","Add","createSong","songHelper","getDefaultSong","then","res","catch","e","theme","section","borderWidth","borderStyle","borderRadius","borderColor","palette","primary","main","overflow","whiteSpace","backgroundColor","normalViewRoot","name","linesDiv","line","editForm","nameField","bottomDiv","lineSubmitButton","cloneButton","deleteButton","marginLeft","dragHandle","SongSection","songId","sectionId","editMode","deleteConfirm","setDeleteConfirm","DragHandle","SortableHandle","Box","Icon","DragIndicator","find","s","sections","handleNameChange","editedSection","lines","value","editSection","handleLinesChange","linesArray","linesStringToArray","handleCloneClick","cloneSection","handleDeleteClick","preventDefault","deleteSection","TextField","label","defaultValue","onChange","multiline","rows","size","linesArrayToString","fullWidth","index","SortableItem","SortableElement","SortableList","SortableContainer","align","SongSectionList","handleSortEnd","oldIndex","newIndex","sortedSections","arrayMove","sortSections","onSortEnd","useDragHandle","useWindowAsScrollContainer","closeButton","right","spacing","top","grey","DialogCloseButton","Close","UnsavedPrompt","handleSaveConfirmClick","handleSaveDiscardClick","unsavedChanges","handlePromptSaveClick","onConfirm","handlePromptDiscardClick","when","isActive","onCancel","navPrompt","SaveDialog","handleDiscardClick","menuContainer","editModeButton","titleField","addSectionButton","deleteSongButton","dialogCloseButton","Song","setEditMode","saveOpen","setSaveOpen","titleError","setTitleError","useParams","snapshot","useEffect","resetSnapshot","handleSaveClick","saveSnapshot","saveSong","handleEditButtonClick","handleEditModeExitClick","handleEditModeEnterClick","getSongFromSnapshot","handleTitleChange","editTitle","handleAddSectionClick","addSection","_","isEmpty","isEqual","error","helperText","saveButton","DeleteForever","mainContainer","alignItems","contentContainer","AuthenticatedApp","initializeSongs"],"mappings":"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","file":"static/js/5.e754ab99.chunk.js","sourcesContent":["import React from 'react'\nimport { makeStyles, Typography } from '@material-ui/core'\n\nconst useStyles = makeStyles(() => ({\n  header: {\n    marginTop: 30\n  }\n}))\n\nconst Heading = ({ text }) => {\n  const classes = useStyles()\n  return (\n    <Typography component='h1' variant='h4' className={classes.header}>\n      {text}\n    </Typography>\n  )\n}\n\nexport default Heading","import React from 'react'\nimport { Button } from '@material-ui/core'\nimport { useDispatch } from 'react-redux'\nimport { logout } from '../../redux/authReducer'\nimport { useHistory } from 'react-router'\nimport PropTypes from 'prop-types'\nimport { showAlert, alerts } from '../../redux/alertReducer'\n\nconst LogButton = ({ loggedIn }) => {\n\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  const handleLogClick = () => {\n    if (loggedIn) {\n      dispatch(logout())\n      dispatch(showAlert(alerts.logout))\n    }\n    history.push('/')\n  }\n\n  return (\n    <Button\n      color='inherit'\n      onClick={handleLogClick}\n    >\n      {loggedIn ? 'Log out' : 'Log in'}\n    </Button>\n  )\n}\n\nLogButton.propTypes = {\n  loggedIn: PropTypes.bool\n}\n\nexport default LogButton","import React from 'react'\nimport { Button, makeStyles } from '@material-ui/core'\nimport { Link } from 'react-router-dom'\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles(() => ({\n  navButton: {\n    textDecoration: 'none',\n    color: 'white',\n    padding: 20\n  }\n}))\n\nconst NavButton = ({ path, text, onClick }) => {\n  const classes = useStyles()\n\n  return (\n    <Button\n      component={Link}\n      to={path}\n      onClick={onClick}\n      color='inherit'\n      className={classes.navButton}\n    >\n      {text}\n    </Button>\n  )\n}\n\nNavButton.propTypes = {\n  path: PropTypes.string,\n  text: PropTypes.string.isRequired,\n  onClick: PropTypes.func\n}\n\nexport default NavButton","import React from 'react'\nimport NavButton from './NavButton'\nimport { makeStyles } from '@material-ui/core'\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    flex: 1\n  }\n}))\n\nconst NavButtonsDiv = ({ loggedIn }) => {\n  const classes = useStyles()\n\n  const loggedInButtons = () => {\n    return <NavButton path='/songs/' text='Your songs' />\n  }\n\n  const loggedOutButtons = () => {\n\n  }\n\n  return (\n    <div className={classes.root}>\n      {loggedIn ? loggedInButtons() : loggedOutButtons()}\n    </div>\n  )\n}\n\nNavButtonsDiv.propTypes = {\n  loggedIn: PropTypes.bool\n}\n\nexport default NavButtonsDiv","import React from 'react'\nimport { AppBar, Toolbar, Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport LogoutButton from './LogButton'\nimport NavButtonsDiv from './NavButtonsDiv'\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    flexGrow: 1\n  },\n  title: {\n    fontSize: 20,\n    paddingRight: 15\n  }\n}))\n\nconst NavBar = ({ loggedIn }) => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <AppBar position='static'>\n        <Toolbar>\n          <Typography className={classes.title}>\n            SongWriter\n          </Typography>\n          <NavButtonsDiv loggedIn={loggedIn} />\n          <LogoutButton loggedIn={loggedIn} />\n        </Toolbar>\n      </AppBar>\n    </div>\n\n  )\n}\n\nNavBar.propTypes = {\n  loggedIn: PropTypes.bool\n}\n\nexport default NavBar","import React from 'react'\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core'\nimport PropTypes from 'prop-types'\n\nconst DeleteDialog = ({ open, setOpen, handleConfirmClick }) => {\n  return (\n    <Dialog\n      open={open}\n      onClose={() => setOpen(false)}\n    >\n      <DialogTitle>Delete this song?</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          Once deleted, this song cannot be restored.\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleConfirmClick} color='secondary' variant='contained'>\n          Delete permanently\n        </Button>\n        <Button onClick={() => setOpen(false)} variant='contained'>\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nDeleteDialog.propTypes = {\n  open: PropTypes.bool.isRequired,\n  setOpen: PropTypes.func.isRequired,\n  handleConfirmClick: PropTypes.func.isRequired\n}\n\nexport default DeleteDialog","import React, { useState } from 'react'\nimport { IconButton, Menu, MenuItem, makeStyles, Button } from '@material-ui/core'\nimport { MoreVert } from '@material-ui/icons'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { deleteSong, cloneSong } from '../../redux/songReducer'\nimport DeleteDialog from './DeleteDialog'\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles(() => ({\n  menu: {\n    '& .MuiPaper-root': {\n      //backgroundColor: '#e8e8e8ed'\n    }\n  }\n}))\n\nconst SongMenu = ({ song }) => {\n  const [anchorTo, setAnchorTo] = useState(null)\n  const [delConfirmOpen, setDelConfirmOpen] = useState(false)\n\n  const classes = useStyles()\n  const dispatch = useDispatch()\n  const user = useSelector((state) => state.auth.user)\n\n  const handleClick = (event) => {\n    setAnchorTo(event.target)\n  }\n\n  const handleClose = () => {\n    setAnchorTo(null)\n  }\n\n  const handleCloneClick = () => {\n    dispatch(cloneSong(song, user.username))\n    handleClose()\n  }\n\n  const handleDeleteClick = () => {\n    setDelConfirmOpen(true)\n    handleClose()\n  }\n\n  const handleDeleteConfirmClick = () => {\n    dispatch(deleteSong(song))\n  }\n\n  return (\n    <>\n      <IconButton\n        onClick={handleClick}\n      >\n        <MoreVert />\n      </IconButton>\n      <Menu\n        elevation={1}\n        anchorEl={anchorTo}\n        keepMounted\n        open={anchorTo !== null}\n        onClose={handleClose}\n        className={classes.menu}\n      >\n        <MenuItem>\n          <Button\n            variant='outlined'\n            color='primary'\n            onClick={handleCloneClick}\n          >\n            Clone\n          </Button>\n        </MenuItem>\n        <MenuItem>\n          <Button\n            variant='outlined'\n            color='secondary'\n            onClick={handleDeleteClick}\n          >\n            Delete\n          </Button>\n        </MenuItem>\n      </Menu>\n      <DeleteDialog\n        open={delConfirmOpen}\n        setOpen={setDelConfirmOpen}\n        handleConfirmClick={handleDeleteConfirmClick}\n      />\n    </>\n  )\n}\n\nSongMenu.propTypes = {\n  song: PropTypes.object.isRequired\n}\n\nexport default SongMenu","import React from 'react'\nimport { ListItem, makeStyles, Typography, Container } from '@material-ui/core'\nimport { Link } from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport SongMenu from './SongMenu'\n\nconst useStyles = makeStyles(() => ({\n  item: {\n\n  },\n  container: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  title: {\n    textAlign: 'left',\n    marginTop: 8,\n    marginBottom: 8\n  },\n  menu: {\n\n  }\n}))\n\nconst SongListItem = ({ song }) => {\n  const classes = useStyles()\n\n  return (\n    <Container maxWidth='xl' className={classes.container}>\n      <ListItem\n        component={Link}\n        to={`/songs/${song.id}`}\n        divider={true}\n        className={classes.item}\n      >\n        \n        <Typography variant='h6' className={classes.title}>\n          {song.title}\n        </Typography>\n      </ListItem>\n      <SongMenu song={song} className={classes.menu} />\n    </Container>\n  )\n}\n\nSongListItem.propTypes = {\n  song: PropTypes.object.isRequired\n}\n\nexport default SongListItem","import React from 'react'\nimport { List, makeStyles, Button } from '@material-ui/core'\nimport SongListItem from './SongListItem'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Add } from '@material-ui/icons'\nimport songHelper from '../../helpers/songHelper'\nimport { createSong } from '../../redux/songReducer'\nimport { useHistory } from 'react-router'\nimport Heading from '../Heading'\n\nconst useStyles = makeStyles(() => ({\n  list: {\n    marginTop: 10\n  },\n  addSongButton: {\n    margin: 8\n  }\n}))\n\nconst SongList = () => {\n  const classes = useStyles()\n  const songs = useSelector((state) => state.songs)\n  const user = useSelector((state) => state.auth.user)\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  console.log('Rendered', songs.length, 'songs')\n\n  const handleNewSongClick = () => {\n    dispatch(createSong(songHelper.getDefaultSong(user))) // Note: not error handling createSong\n      .then(res => {\n        history.push('/songs/' + res.id)\n        console.log('Redirected!')\n      })\n      .catch(e => console.log('Error creating new song:', e))\n  }\n\n  const listSongs = () => songs.map(song =>\n    <SongListItem\n      key={song.id}\n      to={`/songs/${song.id}`}\n      song={song}\n    />\n  )\n\n  return (\n    <div>\n      <Heading text='Your songs' />\n      <List className={classes.list}>\n        {songs.length !== 0 ? listSongs() : <p>No songs found</p>}\n      </List>\n      <Button\n        className={classes.addSongButton}\n        variant='contained'\n        color='primary'\n        startIcon={<Add />}\n        onClick={handleNewSongClick}\n      >\n        New song\n      </Button>\n    </div>\n  )\n}\n\nexport default SongList","import React, { useState } from 'react'\nimport { makeStyles, TextField, Button, Icon, Box, Typography } from '@material-ui/core'\nimport PropTypes from 'prop-types'\nimport songHelper from '../../helpers/songHelper'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { editSection, deleteSection, cloneSection } from '../../redux/songReducer'\n\nimport { SortableHandle } from 'react-sortable-hoc'\nimport { DragIndicator } from '@material-ui/icons'\n\nconst useStyles = makeStyles((theme) => ({\n  section: {\n    borderWidth: 2,\n    borderStyle: 'solid',\n    borderRadius: 5,\n    borderColor: theme.palette.primary.main,\n    padding: 20,\n    marginBottom: 3,\n    overflow: 'auto',\n    whiteSpace: 'nowrap',\n    backgroundColor: '#fff'\n  },\n  normalViewRoot: {\n    marginTop: -12,\n    marginBottom: -15\n  },\n  name: {\n    marginTop: 10\n  },\n  linesDiv: {\n    marginTop: 12,\n    marginBottom: 10\n  },\n  line: {\n    marginBottom: 5\n  },\n  editForm: {\n    marginBottom: 15\n  },\n  nameField: {\n    marginBottom: 10\n  },\n  bottomDiv: {\n    display: 'flex'\n  },\n  lineSubmitButton: {\n    marginTop: 10,\n    marginBottom: -25\n  },\n  cloneButton: {\n    marginTop: 10,\n    marginBottom: -25,\n  },\n  deleteButton: {\n    marginTop: 10,\n    marginBottom: -25,\n    marginLeft: 'auto'\n  },\n  dragHandle: {\n    marginLeft: 'auto',\n    marginTop: 10,\n    marginBottom: -25,\n  }\n}))\n\nconst SongSection = ({ songId, sectionId, editMode }) => {\n  const [deleteConfirm, setDeleteConfirm] = useState(false)\n\n  const classes = useStyles()\n  const dispatch = useDispatch()\n\n  const DragHandle = SortableHandle(() => <Box className={classes.dragHandle}> <Icon><DragIndicator /></Icon> </Box>)\n\n  const section = useSelector((state) => state.songs.find(s => s.id === songId).sections.find(s => s.id === sectionId))\n\n  const editView = () => {\n    return (\n      <form className={classes.editForm} >\n        <TextField className={classes.nameField} label='Edit name' name='name' defaultValue={section.name} onChange={handleNameChange} />\n        <div>\n          <TextField\n            multiline\n            label='Lines'\n            name='lines'\n            rows={section.lines.size}\n            defaultValue={songHelper.linesArrayToString(section.lines)}\n            onChange={handleLinesChange}\n            fullWidth={true}\n          />\n        </div>\n        <div className={classes.bottomDiv}>\n          <Button\n            className={classes.cloneButton}\n            size='small'\n            color='primary'\n            variant='outlined'\n            onClick={handleCloneClick}\n          >\n            Clone\n          </Button>\n          <DragHandle />\n          <Button\n            className={classes.deleteButton}\n            size='small'\n            color='secondary'\n            variant='outlined'\n            onClick={handleDeleteClick}\n          >\n            {deleteConfirm ? 'Confirm deletion' : 'Delete'}\n          </Button>\n        </div>\n      </form>\n    )\n  }\n\n  const normalView = () => {\n    return (\n      <div className={classes.normalViewRoot}>\n        <Typography variant='h6' className={classes.name}>\n          {section.name}\n        </Typography>\n        <div className={classes.linesDiv}>\n          {section.lines.map((line, index) => {\n            return (\n              <div key={index}>\n                <Typography variant='body1' className={classes.line}>{line}</Typography>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n\n  const handleNameChange = (event) => {\n    const editedSection = { ...section, lines: [...section.lines], name: event.target.value }\n    dispatch(editSection(songId, editedSection))\n  }\n\n  const handleLinesChange = (event) => {\n    const linesArray = songHelper.linesStringToArray(event.target.value)\n    const editedSection = { ...section, lines: linesArray }\n    dispatch(editSection(songId, editedSection))\n  }\n\n  const handleCloneClick = () => {\n    console.log('Cloning', section)\n    dispatch(cloneSection(songId, section))\n  }\n\n  const handleDeleteClick = (event) => {\n    event.preventDefault()\n    console.log('Delete button pressed!')\n    if (deleteConfirm) {\n      console.log('Delete for realz')\n      dispatch(deleteSection(songId, section))\n    } else {\n      setDeleteConfirm(true)\n    }\n  }\n\n  return (\n    <div className={classes.section}>\n      {editMode ? editView() : normalView()}\n    </div>\n  )\n}\n\nSongSection.propTypes = {\n  songId: PropTypes.string.isRequired,\n  sectionId: PropTypes.number.isRequired,\n  editMode: PropTypes.bool.isRequired\n}\n\nexport default SongSection","import React from 'react'\nimport { Container } from '@material-ui/core'\nimport SongSection from './SongSection'\nimport { SortableContainer, SortableElement } from 'react-sortable-hoc'\nimport arrayMove from 'array-move'\nimport { useDispatch } from 'react-redux'\nimport { sortSections } from '../../redux/songReducer'\n\nconst SortableItem = SortableElement(({ section, song, editMode }) => {\n  return (\n    <SongSection\n      songId={song.id}\n      sectionId={section.id}\n      editMode={editMode}\n    >\n    </SongSection>\n  )\n})\n\nconst SortableList = SortableContainer(({ song, editMode }) => {\n  return (\n    <Container maxWidth={false} align='left'>\n      {song.sections.map((section, index) => {\n        return (\n          <SortableItem\n            key={section.id}\n            index={index}\n            section={section}\n            song={song}\n            editMode={editMode}\n          />\n        )\n      })}\n    </Container>\n  )\n})\n\nconst SongSectionList = ({ song, editMode }) => {\n\n  const dispatch = useDispatch()\n\n  const handleSortEnd = ({ oldIndex, newIndex }) => {\n    const sortedSections = arrayMove(song.sections, oldIndex, newIndex)\n    dispatch(sortSections(song, sortedSections))\n  }\n\n  const renderSections = () => {\n    if (song.sections.length === 0) {\n      return (\n        <Container>\n          <h2>No sections</h2>\n        </Container>\n      )\n    }\n    return (\n      <SortableList\n        song={song}\n        editMode={editMode}\n        onSortEnd={handleSortEnd}\n        useDragHandle\n        useWindowAsScrollContainer\n      />\n    )\n  }\n\n  return (\n    renderSections()\n  )\n}\n\nexport default SongSectionList","import React from 'react'\nimport { makeStyles, IconButton } from '@material-ui/core'\nimport { Close } from '@material-ui/icons'\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  }\n}))\n\nconst DialogCloseButton = ({ onClick }) => {\n  const classes = useStyles()\n\n  return (\n    <IconButton className={classes.closeButton} onClick={onClick}>\n      <Close />\n    </IconButton>\n  )\n}\n\nDialogCloseButton.propTypes = {\n  onClick: PropTypes.func.isRequired\n}\n\nexport default DialogCloseButton","import React from 'react'\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core'\nimport NavigationPrompt from 'react-router-navigation-prompt'\nimport PropTypes from 'prop-types'\nimport DialogCloseButton from '../DialogCloseButton'\n\nconst UnsavedPrompt = ({ handleSaveConfirmClick, handleSaveDiscardClick, unsavedChanges }) => {\n\n  const navPrompt = (isActive, onCancel, onConfirm) => {\n    return (\n      <Dialog\n        open={isActive}\n        onClose={onCancel}\n      >\n        <DialogTitle>You have unsaved changes</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            If you leave without saving, all changes will be lost!\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handlePromptSaveClick(onConfirm)} color='primary' variant='contained'>\n            Save and leave\n          </Button>\n          <Button onClick={handlePromptDiscardClick(onConfirm)} color='secondary' variant='contained'>\n            Leave without saving\n          </Button>\n          <DialogCloseButton onClick={onCancel} />\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  const handlePromptSaveClick = (onConfirm) => () => {\n    handleSaveConfirmClick()\n    onConfirm()\n  }\n\n  const handlePromptDiscardClick = (onConfirm) => () => {\n    handleSaveDiscardClick()\n    onConfirm()\n  }\n\n  return (\n    <NavigationPrompt when={unsavedChanges()}>\n      {({ isActive, onCancel, onConfirm }) => navPrompt(isActive, onCancel, onConfirm) }\n    </NavigationPrompt>\n  )\n}\n\nUnsavedPrompt.propTypes = {\n  handleSaveConfirmClick: PropTypes.func.isRequired,\n  handleSaveDiscardClick: PropTypes.func.isRequired,\n  unsavedChanges: PropTypes.func.isRequired\n}\n\nexport default UnsavedPrompt","import React from 'react'\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core'\nimport DialogCloseButton from '../DialogCloseButton'\nimport PropTypes from 'prop-types'\n\nconst SaveDialog = ({ open, setOpen, handleConfirmClick, handleDiscardClick }) => {\n  return (\n    <Dialog\n      open={open}\n      onClose={() => setOpen(false)}\n    >\n      <DialogTitle>Save changes?</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          Save or discard the changes you have made.\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleConfirmClick} color='primary' variant='contained'>\n          Save changes\n        </Button>\n        <Button onClick={handleDiscardClick} color='secondary' variant='contained'>\n          Discard changes\n        </Button>\n        <DialogCloseButton onClick={() => setOpen(false)} />\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nSaveDialog.propTypes = {\n  open: PropTypes.bool.isRequired,\n  setOpen: PropTypes.func.isRequired,\n  handleConfirmClick: PropTypes.func.isRequired,\n  handleDiscardClick: PropTypes.func.isRequired\n}\n\nexport default SaveDialog","import React, { useState, useEffect } from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport { makeStyles, Container, Button, TextField } from '@material-ui/core'\nimport { Add, DeleteForever } from '@material-ui/icons'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { editTitle, addSection, deleteSong, saveSong, getSongFromSnapshot } from '../../redux/songReducer'\nimport { saveSnapshot, resetSnapshot } from '../../redux/snapshotReducer'\nimport SongSectionList from './SongSectionList'\nimport _ from 'lodash'\nimport UnsavedPrompt from './UnsavedPrompt'\nimport DeleteDialog from './DeleteDialog'\nimport SaveDialog from './SaveDialog'\nimport Heading from '../Heading'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n\n  },\n  menuContainer: {\n    marginBottom: theme.spacing(1)\n  },\n  editModeButton: {\n    marginLeft: theme.spacing(1)\n  },\n  titleField: {\n    margin: 12\n  },\n  addSectionButton: {\n    marginTop: theme.spacing(1)\n  },\n  deleteSongButton: {\n    marginLeft: 'auto'\n  },\n  dialogCloseButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  }\n}))\n\nconst Song = () => {\n  const [editMode, setEditMode] = useState(false)\n  const [delConfirmOpen, setDelConfirmOpen] = useState(false)\n  const [saveOpen, setSaveOpen] = useState(false)\n  const [titleError, setTitleError] = useState(false)\n\n  const classes = useStyles()\n  const id = useParams().id\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  const song = useSelector((state) => state.songs.find(s => s.id === id))\n\n  const snapshot = useSelector((state) => state.snapshot)\n\n  useEffect(() => {\n    dispatch(resetSnapshot())\n  }, [dispatch])\n\n  console.log('Song render:', song)\n\n  const title = () => {\n    if (editMode) {\n      return (\n        <TextField\n          error={titleError}\n          className={classes.titleField}\n          label='Edit title'\n          defaultValue={song.title}\n          onChange={handleTitleChange}\n          helperText={titleError ? 'Title cannot be empty!' : ''} // Todo: enforce\n        />\n      )\n    } else {\n      return (\n        <Heading text={song.title}/>\n      )\n    }\n  }\n\n  const saveButton = () => {\n    if (unsavedChanges()) {\n      return (\n        <Button\n          color='primary'\n          variant='outlined'\n          onClick={handleSaveClick}\n        >\n          Save changes\n        </Button>\n      )\n    }\n  }\n\n  const editModeButton = () => {\n    return (\n      <Button\n        color='primary'\n        variant='contained'\n        onClick={handleEditButtonClick}\n        className={classes.editModeButton}\n      >\n        {editMode ? 'Exit edit mode' : 'Edit mode'}\n      </Button>\n    )\n  }\n\n  const addSectionButton = () => {\n    if (editMode) {\n      return (\n        <Button\n          className={classes.addSectionButton}\n          variant='contained'\n          color='primary'\n          startIcon={<Add />}\n          onClick={handleAddSectionClick}\n        >\n          New section\n        </Button>\n      )\n    }\n    return (<div/>)\n  }\n\n  const deleteSongButton = () => {\n    if (editMode) {\n      return (\n        <Button\n          className={classes.deleteSongButton}\n          variant='contained'\n          color='secondary'\n          startIcon={<DeleteForever />}\n          onClick={() => setDelConfirmOpen(true)}\n        >\n          Delete song\n        </Button>\n      )\n    }\n    return (<div/>)\n  }\n\n  const handleSaveClick = () => {\n    dispatch(saveSnapshot(song))\n    dispatch(saveSong(song))\n  }\n\n  const handleEditButtonClick = () => {\n    if (editMode) {\n      handleEditModeExitClick()\n    } else {\n      handleEditModeEnterClick()\n    }\n  }\n\n  const handleEditModeEnterClick = () => {\n    dispatch(saveSnapshot(song))\n    setEditMode(true)\n  }\n\n  const handleEditModeExitClick = () => {\n    console.log('Exiting edit mode')\n    if (unsavedChanges()) {\n      setSaveOpen(true)\n    } else {\n      setEditMode(false)\n      dispatch(resetSnapshot())\n    }\n  }\n\n  const handleSaveConfirmClick = () => {\n    console.log('Saving!')\n    setSaveOpen(false)\n    setEditMode(false)\n    dispatch(resetSnapshot())\n    dispatch(saveSong(song))\n  }\n\n  const handleSaveDiscardClick = () => {\n    console.log('Discarding changes!')\n    setSaveOpen(false)\n    setEditMode(false)\n    dispatch(getSongFromSnapshot(snapshot))\n    dispatch(resetSnapshot())\n  }\n\n  const handleTitleChange = (event) => {\n    if (event.target.value === '') {\n      setTitleError(true)\n    } else if (titleError) {\n      setTitleError(false)\n    }\n    dispatch(editTitle(song, event.target.value))\n  }\n\n  const handleAddSectionClick = () => {\n    console.log('Add new section!')\n    dispatch(addSection(song))\n  }\n\n  const handleDeleteConfirmClick = () => {\n    console.log('Deleting song here')\n    dispatch(deleteSong(song))\n    dispatch(resetSnapshot())\n    history.push('/songs/')\n  }\n\n  const unsavedChanges = () => {\n    return !_.isEmpty(snapshot) && !_.isEqual(snapshot, song)\n  }\n\n  if (song) {\n    return (\n      <div className={classes.root}>\n        {title()}\n        <div>\n          <Container align='right' maxWidth={false} className={classes.menuContainer}>\n            {saveButton()}\n            {editModeButton()}\n          </Container>\n          <SongSectionList song={song} editMode={editMode} />\n        </div>\n        <Container maxWidth={false}>\n          {addSectionButton()}\n        </Container>\n        <Container align='right' maxWidth={false}>\n          {deleteSongButton()}\n        </Container>\n        <DeleteDialog\n          open={delConfirmOpen}\n          setOpen={setDelConfirmOpen}\n          handleConfirmClick={handleDeleteConfirmClick}\n        />\n        <SaveDialog\n          open={saveOpen}\n          setOpen={setSaveOpen}\n          handleConfirmClick={handleSaveConfirmClick}\n          handleDiscardClick={handleSaveDiscardClick}\n        />\n        <UnsavedPrompt\n          handleSaveConfirmClick={handleSaveConfirmClick}\n          handleSaveDiscardClick={handleSaveDiscardClick}\n          unsavedChanges={unsavedChanges}\n        />\n      </div>\n    )\n  } else {\n    return (\n      <div>\n        <Heading text='Loading song' />\n        <p>Check the url if it takes too long</p>\n      </div>\n    )\n  }\n}\n\nexport default Song","import React, { useEffect } from 'react'\nimport NavBar from '../nav/NavBar'\nimport { makeStyles, Container } from '@material-ui/core'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport SongList from '../songs/SongList'\nimport Song from '../songs/Song'\nimport { initializeSongs } from '../../redux/songReducer'\nimport { useDispatch, useSelector } from 'react-redux'\n\nconst useStyles = makeStyles(() => ({\n  mainContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20\n  },\n  contentContainer: {\n\n  }\n}))\n\nconst AuthenticatedApp = () => {\n  console.log('App rendering')\n  //const [open, setOpen] = useState(false)\n\n  const classes = useStyles()\n  const dispatch = useDispatch()\n\n  const user = useSelector((state) => state.auth.user)\n\n  useEffect(() => {\n    console.log('App effect')\n    dispatch(initializeSongs(user))\n  }, [dispatch, user])\n\n  return (\n    <>\n      <Router>\n        <NavBar loggedIn />\n        <Container maxWidth={false} className={classes.mainContainer}>\n          <Container maxWidth={false} align='center' className={classes.contentContainer}>\n            <Switch>\n              <Route path='/songs/:id'>\n                <Song />\n              </Route>\n              <Route path='/songs/'>\n                <SongList />\n              </Route>\n              <Route path='/'><p>Welcome</p></Route>\n            </Switch>\n          </Container>\n        </Container>\n      </Router>\n    </>\n  )\n}\n\nexport default AuthenticatedApp\n"],"sourceRoot":""}